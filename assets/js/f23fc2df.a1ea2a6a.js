"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[1828],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>g});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),s=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),m=s(a),u=i,g=m["".concat(l,".").concat(u)]||m[u]||c[u]||r;return a?n.createElement(g,o(o({ref:t},d),{},{components:a})):n.createElement(g,o({ref:t},d))}));function g(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=u;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[m]="string"==typeof e?e:i,o[1]=p;for(var s=2;s<r;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},4068:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>p,toc:()=>s});var n=a(7462),i=(a(7294),a(3905));const r={sidebar_position:4,title:"Metadata",description:"Use the Metadata API to define metadata in any layout or page.",related:{description:"View all the Metadata API options.",links:["app/api-reference/functions/generate-metadata","app/api-reference/file-conventions/metadata","app/api-reference/functions/generate-viewport"]}},o=void 0,p={unversionedId:"app/building-your-application/optimizing/metadata",id:"app/building-your-application/optimizing/metadata",title:"Metadata",description:"Use the Metadata API to define metadata in any layout or page.",source:"@site/docs/02-app/01-building-your-application/06-optimizing/04-metadata.mdx",sourceDirName:"02-app/01-building-your-application/06-optimizing",slug:"/app/building-your-application/optimizing/metadata",permalink:"/docs/app/building-your-application/optimizing/metadata",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/02-app/01-building-your-application/06-optimizing/04-metadata.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Metadata",description:"Use the Metadata API to define metadata in any layout or page.",related:{description:"View all the Metadata API options.",links:["app/api-reference/functions/generate-metadata","app/api-reference/file-conventions/metadata","app/api-reference/functions/generate-viewport"]}},sidebar:"tutorialSidebar",previous:{title:"Scripts",permalink:"/docs/app/building-your-application/optimizing/scripts"},next:{title:"Static Assets",permalink:"/docs/app/building-your-application/optimizing/static-assets"}},l={},s=[{value:"Static Metadata",id:"static-metadata",level:2},{value:"Dynamic Metadata",id:"dynamic-metadata",level:2},{value:"File-based metadata",id:"file-based-metadata",level:2},{value:"Behavior",id:"behavior",level:2},{value:"Default Fields",id:"default-fields",level:3},{value:"Ordering",id:"ordering",level:3},{value:"Merging",id:"merging",level:3},{value:"Overwriting fields",id:"overwriting-fields",level:4},{value:"Inheriting fields",id:"inheriting-fields",level:4},{value:"Dynamic Image Generation",id:"dynamic-image-generation",level:2},{value:"JSON-LD",id:"json-ld",level:2}],d={toc:s},m="wrapper";function c(e){let{components:t,...a}=e;return(0,i.kt)(m,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Next.js has a Metadata API that can be used to define your application metadata (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"meta")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"link")," tags inside your HTML ",(0,i.kt)("inlineCode",{parentName:"p"},"head")," element) for improved SEO and web shareability."),(0,i.kt)("p",null,"There are two ways you can add metadata to your application:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Config-based Metadata"),": Export a ",(0,i.kt)("a",{parentName:"li",href:"/docs/app/api-reference/functions/generate-metadata#metadata-object"},"static ",(0,i.kt)("inlineCode",{parentName:"a"},"metadata")," object")," or a dynamic ",(0,i.kt)("a",{parentName:"li",href:"/docs/app/api-reference/functions/generate-metadata#generatemetadata-function"},(0,i.kt)("inlineCode",{parentName:"a"},"generateMetadata")," function")," in a ",(0,i.kt)("inlineCode",{parentName:"li"},"layout.js")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"page.js")," file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"File-based Metadata"),": Add static or dynamically generated special files to route segments.")),(0,i.kt)("p",null,"With both these options, Next.js will automatically generate the relevant ",(0,i.kt)("inlineCode",{parentName:"p"},"<head>")," elements for your pages. You can also create dynamic OG images using the ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/api-reference/functions/image-response"},(0,i.kt)("inlineCode",{parentName:"a"},"ImageResponse"))," constructor."),(0,i.kt)("h2",{id:"static-metadata"},"Static Metadata"),(0,i.kt)("p",null,"To define static metadata, export a ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/api-reference/functions/generate-metadata#metadata-object"},(0,i.kt)("inlineCode",{parentName:"a"},"Metadata")," object")," from a ",(0,i.kt)("inlineCode",{parentName:"p"},"layout.js")," or static ",(0,i.kt)("inlineCode",{parentName:"p"},"page.js")," file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'filename="layout.tsx | page.tsx" switcher',filename:'"layout.tsx',"|":!0,'page.tsx"':!0,switcher:!0},'import type { Metadata } from "next";\n\nexport const metadata: Metadata = {\n    title: "...",\n    description: "...",\n};\n\nexport default function Page() {}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'filename="layout.js | page.js" switcher',filename:'"layout.js',"|":!0,'page.js"':!0,switcher:!0},'export const metadata = {\n    title: "...",\n    description: "...",\n};\n\nexport default function Page() {}\n')),(0,i.kt)("p",null,"For all the available options, see the ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/api-reference/functions/generate-metadata"},"API Reference"),"."),(0,i.kt)("h2",{id:"dynamic-metadata"},"Dynamic Metadata"),(0,i.kt)("p",null,"You can use ",(0,i.kt)("inlineCode",{parentName:"p"},"generateMetadata")," function to ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," metadata that requires dynamic values."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'filename="app/products/[id]/page.tsx" switcher',filename:'"app/products/[id]/page.tsx"',switcher:!0},'import type { Metadata, ResolvingMetadata } from "next";\n\ntype Props = {\n    params: { id: string };\n    searchParams: { [key: string]: string | string[] | undefined };\n};\n\nexport async function generateMetadata(\n    { params, searchParams }: Props,\n    parent: ResolvingMetadata,\n): Promise<Metadata> {\n    // read route params\n    const id = params.id;\n\n    // fetch data\n    const product = await fetch(`https://.../${id}`).then((res) => res.json());\n\n    // optionally access and extend (rather than replace) parent metadata\n    const previousImages = (await parent).openGraph?.images || [];\n\n    return {\n        title: product.title,\n        openGraph: {\n            images: ["/some-specific-page-image.jpg", ...previousImages],\n        },\n    };\n}\n\nexport default function Page({ params, searchParams }: Props) {}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'filename="app/products/[id]/page.js" switcher',filename:'"app/products/[id]/page.js"',switcher:!0},'export async function generateMetadata({ params, searchParams }, parent) {\n    // read route params\n    const id = params.id;\n\n    // fetch data\n    const product = await fetch(`https://.../${id}`).then((res) => res.json());\n\n    // optionally access and extend (rather than replace) parent metadata\n    const previousImages = (await parent).openGraph?.images || [];\n\n    return {\n        title: product.title,\n        openGraph: {\n            images: ["/some-specific-page-image.jpg", ...previousImages],\n        },\n    };\n}\n\nexport default function Page({ params, searchParams }) {}\n')),(0,i.kt)("p",null,"For all the available params, see the ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/api-reference/functions/generate-metadata"},"API Reference"),"."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Good to know"),":"),(0,i.kt)("ul",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ul"},"Both static and dynamic metadata through ",(0,i.kt)("inlineCode",{parentName:"li"},"generateMetadata")," are ",(0,i.kt)("strong",{parentName:"li"},"only supported in Server Components"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fetch")," requests are automatically ",(0,i.kt)("a",{parentName:"li",href:"/docs/app/building-your-application/caching#request-memoization"},"memoized")," for the same data across ",(0,i.kt)("inlineCode",{parentName:"li"},"generateMetadata"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"generateStaticParams"),", Layouts, Pages, and Server Components. React ",(0,i.kt)("a",{parentName:"li",href:"/docs/app/building-your-application/caching#request-memoization"},(0,i.kt)("inlineCode",{parentName:"a"},"cache")," can be used")," if ",(0,i.kt)("inlineCode",{parentName:"li"},"fetch")," is unavailable."),(0,i.kt)("li",{parentName:"ul"},"Next.js will wait for data fetching inside ",(0,i.kt)("inlineCode",{parentName:"li"},"generateMetadata")," to complete before streaming UI to the client. This guarantees the first part of a ",(0,i.kt)("a",{parentName:"li",href:"/docs/app/building-your-application/routing/loading-ui-and-streaming"},"streamed response")," includes ",(0,i.kt)("inlineCode",{parentName:"li"},"<head>")," tags."))),(0,i.kt)("h2",{id:"file-based-metadata"},"File-based metadata"),(0,i.kt)("p",null,"These special files are available for metadata:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/app/api-reference/file-conventions/metadata/app-icons"},"favicon.ico, apple-icon.jpg, and icon.jpg")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/app/api-reference/file-conventions/metadata/opengraph-image"},"opengraph-image.jpg and twitter-image.jpg")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/app/api-reference/file-conventions/metadata/robots"},"robots.txt")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/app/api-reference/file-conventions/metadata/sitemap"},"sitemap.xml"))),(0,i.kt)("p",null,"You can use these for static metadata, or you can programmatically generate these files with code."),(0,i.kt)("p",null,"For implementation and examples, see the ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/api-reference/functions/generate-metadata"},"Metadata Files")," API Reference and ",(0,i.kt)("a",{parentName:"p",href:"#dynamic-image-generation"},"Dynamic Image Generation"),"."),(0,i.kt)("h2",{id:"behavior"},"Behavior"),(0,i.kt)("p",null,"File-based metadata has the higher priority and will override any config-based metadata."),(0,i.kt)("h3",{id:"default-fields"},"Default Fields"),(0,i.kt)("p",null,"There are two default ",(0,i.kt)("inlineCode",{parentName:"p"},"meta")," tags that are always added even if a route doesn't define metadata:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/docs/Web/HTML/Element/meta#attr-charset"},"meta charset tag")," sets the character encoding for the website."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/docs/Web/HTML/Viewport_meta_tag"},"meta viewport tag")," sets the viewport width and scale for the website to adjust for different devices.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<meta charset="utf-8" />\n<meta name="viewport" content="width=device-width, initial-scale=1" />\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Good to know"),": You can overwrite the default ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/api-reference/functions/generate-metadata#viewport"},(0,i.kt)("inlineCode",{parentName:"a"},"viewport"))," meta tag.")),(0,i.kt)("h3",{id:"ordering"},"Ordering"),(0,i.kt)("p",null,"Metadata is evaluated in order, starting from the root segment down to the segment closest to the final ",(0,i.kt)("inlineCode",{parentName:"p"},"page.js")," segment. For example:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"app/layout.tsx")," (Root Layout)"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"app/blog/layout.tsx")," (Nested Blog Layout)"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"app/blog/[slug]/page.tsx")," (Blog Page)")),(0,i.kt)("h3",{id:"merging"},"Merging"),(0,i.kt)("p",null,"Following the ",(0,i.kt)("a",{parentName:"p",href:"#ordering"},"evaluation order"),", Metadata objects exported from multiple segments in the same route are ",(0,i.kt)("strong",{parentName:"p"},"shallowly")," merged together to form the final metadata output of a route. Duplicate keys are ",(0,i.kt)("strong",{parentName:"p"},"replaced")," based on their ordering."),(0,i.kt)("p",null,"This means metadata with nested fields such as ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/api-reference/functions/generate-metadata#opengraph"},(0,i.kt)("inlineCode",{parentName:"a"},"openGraph"))," and ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/api-reference/functions/generate-metadata#robots"},(0,i.kt)("inlineCode",{parentName:"a"},"robots"))," that are defined in an earlier segment are ",(0,i.kt)("strong",{parentName:"p"},"overwritten")," by the last segment to define them."),(0,i.kt)("h4",{id:"overwriting-fields"},"Overwriting fields"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'filename="app/layout.js"',filename:'"app/layout.js"'},'export const metadata = {\n    title: "Acme",\n    openGraph: {\n        title: "Acme",\n        description: "Acme is a...",\n    },\n};\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'filename="app/blog/page.js"',filename:'"app/blog/page.js"'},'export const metadata = {\n    title: "Blog",\n    openGraph: {\n        title: "Blog",\n    },\n};\n\n// Output:\n// <title>Blog</title>\n// <meta property="og:title" content="Blog" />\n')),(0,i.kt)("p",null,"In the example above:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"title")," from ",(0,i.kt)("inlineCode",{parentName:"li"},"app/layout.js")," is ",(0,i.kt)("strong",{parentName:"li"},"replaced")," by ",(0,i.kt)("inlineCode",{parentName:"li"},"title")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"app/blog/page.js"),"."),(0,i.kt)("li",{parentName:"ul"},"All ",(0,i.kt)("inlineCode",{parentName:"li"},"openGraph")," fields from ",(0,i.kt)("inlineCode",{parentName:"li"},"app/layout.js")," are ",(0,i.kt)("strong",{parentName:"li"},"replaced")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"app/blog/page.js")," because ",(0,i.kt)("inlineCode",{parentName:"li"},"app/blog/page.js")," sets ",(0,i.kt)("inlineCode",{parentName:"li"},"openGraph")," metadata. Note the absence of ",(0,i.kt)("inlineCode",{parentName:"li"},"openGraph.description"),".")),(0,i.kt)("p",null,"If you'd like to share some nested fields between segments while overwriting others, you can pull them out into a separate variable:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'filename="app/shared-metadata.js"',filename:'"app/shared-metadata.js"'},'export const openGraphImage = { images: ["http://..."] };\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'filename="app/page.js"',filename:'"app/page.js"'},'import { openGraphImage } from "./shared-metadata";\n\nexport const metadata = {\n    openGraph: {\n        ...openGraphImage,\n        title: "Home",\n    },\n};\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'filename="app/about/page.js"',filename:'"app/about/page.js"'},'import { openGraphImage } from "../shared-metadata";\n\nexport const metadata = {\n    openGraph: {\n        ...openGraphImage,\n        title: "About",\n    },\n};\n')),(0,i.kt)("p",null,"In the example above, the OG image is shared between ",(0,i.kt)("inlineCode",{parentName:"p"},"app/layout.js")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"app/about/page.js")," while the titles are different."),(0,i.kt)("h4",{id:"inheriting-fields"},"Inheriting fields"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'filename="app/layout.js"',filename:'"app/layout.js"'},'export const metadata = {\n    title: "Acme",\n    openGraph: {\n        title: "Acme",\n        description: "Acme is a...",\n    },\n};\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'filename="app/about/page.js"',filename:'"app/about/page.js"'},'export const metadata = {\n    title: "About",\n};\n\n// Output:\n// <title>About</title>\n// <meta property="og:title" content="Acme" />\n// <meta property="og:description" content="Acme is a..." />\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Notes")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"title")," from ",(0,i.kt)("inlineCode",{parentName:"li"},"app/layout.js")," is ",(0,i.kt)("strong",{parentName:"li"},"replaced")," by ",(0,i.kt)("inlineCode",{parentName:"li"},"title")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"app/about/page.js"),"."),(0,i.kt)("li",{parentName:"ul"},"All ",(0,i.kt)("inlineCode",{parentName:"li"},"openGraph")," fields from ",(0,i.kt)("inlineCode",{parentName:"li"},"app/layout.js")," are ",(0,i.kt)("strong",{parentName:"li"},"inherited")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"app/about/page.js")," because ",(0,i.kt)("inlineCode",{parentName:"li"},"app/about/page.js")," doesn't set ",(0,i.kt)("inlineCode",{parentName:"li"},"openGraph")," metadata.")),(0,i.kt)("h2",{id:"dynamic-image-generation"},"Dynamic Image Generation"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ImageResponse")," constructor allows you to generate dynamic images using JSX and CSS. This is useful for creating social media images such as Open Graph images, Twitter cards, and more."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ImageResponse")," uses the ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/building-your-application/rendering/edge-and-nodejs-runtimes#edge-runtime"},"Edge Runtime"),", and Next.js automatically adds the correct headers to cached images at the edge, helping improve performance and reducing recomputation."),(0,i.kt)("p",null,"To use it, you can import ",(0,i.kt)("inlineCode",{parentName:"p"},"ImageResponse")," from ",(0,i.kt)("inlineCode",{parentName:"p"},"next/og"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'filename="app/about/route.js"',filename:'"app/about/route.js"'},'import { ImageResponse } from "next/og";\n\nexport const runtime = "edge";\n\nexport async function GET() {\n    return new ImageResponse(\n        (\n            <div\n                style={{\n                    fontSize: 128,\n                    background: "white",\n                    width: "100%",\n                    height: "100%",\n                    display: "flex",\n                    textAlign: "center",\n                    alignItems: "center",\n                    justifyContent: "center",\n                }}\n            >\n                Hello world!\n            </div>\n        ),\n        {\n            width: 1200,\n            height: 600,\n        },\n    );\n}\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ImageResponse")," integrates well with other Next.js APIs, including ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/building-your-application/routing/route-handlers"},"Route Handlers")," and file-based Metadata. For example, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"ImageResponse")," in a ",(0,i.kt)("inlineCode",{parentName:"p"},"opengraph-image.tsx")," file to generate Open Graph images at build time or dynamically at request time."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ImageResponse")," supports common CSS properties including flexbox and absolute positioning, custom fonts, text wrapping, centering, and nested images. ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/api-reference/functions/image-response"},"See the full list of supported CSS properties"),"."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Good to know"),":"),(0,i.kt)("ul",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ul"},"Examples are available in the ",(0,i.kt)("a",{parentName:"li",href:"https://og-playground.vercel.app/"},"Vercel OG Playground"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ImageResponse")," uses ",(0,i.kt)("a",{parentName:"li",href:"https://vercel.com/docs/concepts/functions/edge-functions/og-image-generation"},"@vercel/og"),", ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/vercel/satori"},"Satori"),", and Resvg to convert HTML and CSS into PNG."),(0,i.kt)("li",{parentName:"ul"},"Only the Edge Runtime is supported. The default Node.js runtime will not work."),(0,i.kt)("li",{parentName:"ul"},"Only flexbox and a subset of CSS properties are supported. Advanced layouts (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"display: grid"),") will not work."),(0,i.kt)("li",{parentName:"ul"},"Maximum bundle size of ",(0,i.kt)("inlineCode",{parentName:"li"},"500KB"),". The bundle size includes your JSX, CSS, fonts, images, and any other assets. If you exceed the limit, consider reducing the size of any assets or fetching at runtime."),(0,i.kt)("li",{parentName:"ul"},"Only ",(0,i.kt)("inlineCode",{parentName:"li"},"ttf"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"otf"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"woff")," font formats are supported. To maximize the font parsing speed, ",(0,i.kt)("inlineCode",{parentName:"li"},"ttf")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"otf")," are preferred over ",(0,i.kt)("inlineCode",{parentName:"li"},"woff"),"."))),(0,i.kt)("h2",{id:"json-ld"},"JSON-LD"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://json-ld.org/"},"JSON-LD")," is a format for structured data that can be used by search engines to understand your content. For example, you can use it to describe a person, an event, an organization, a movie, a book, a recipe, and many other types of entities."),(0,i.kt)("p",null,"Our current recommendation for JSON-LD is to render structured data as a ",(0,i.kt)("inlineCode",{parentName:"p"},"<script>")," tag in your ",(0,i.kt)("inlineCode",{parentName:"p"},"layout.js")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"page.js")," components. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'filename="app/products/[id]/page.tsx" switcher',filename:'"app/products/[id]/page.tsx"',switcher:!0},'export default async function Page({ params }) {\n    const product = await getProduct(params.id);\n\n    const jsonLd = {\n        "@context": "https://schema.org",\n        "@type": "Product",\n        name: product.name,\n        image: product.image,\n        description: product.description,\n    };\n\n    return (\n        <section>\n            {/* Add JSON-LD to your page */}\n            <script\n                type="application/ld+json"\n                dangerouslySetInnerHTML={{ __html: JSON.stringify(jsonLd) }}\n            />\n            {/* ... */}\n        </section>\n    );\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'filename="app/products/[id]/page.js" switcher',filename:'"app/products/[id]/page.js"',switcher:!0},'export default async function Page({ params }) {\n    const product = await getProduct(params.id);\n\n    const jsonLd = {\n        "@context": "https://schema.org",\n        "@type": "Product",\n        name: product.name,\n        image: product.image,\n        description: product.description,\n    };\n\n    return (\n        <section>\n            {/* Add JSON-LD to your page */}\n            <script\n                type="application/ld+json"\n                dangerouslySetInnerHTML={{ __html: JSON.stringify(jsonLd) }}\n            />\n            {/* ... */}\n        </section>\n    );\n}\n')),(0,i.kt)("p",null,"You can validate and test your structured data with the ",(0,i.kt)("a",{parentName:"p",href:"https://search.google.com/test/rich-results"},"Rich Results Test")," for Google or the generic ",(0,i.kt)("a",{parentName:"p",href:"https://validator.schema.org/"},"Schema Markup Validator"),"."),(0,i.kt)("p",null,"You can type your JSON-LD with TypeScript using community packages like ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/schema-dts"},(0,i.kt)("inlineCode",{parentName:"a"},"schema-dts")),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'import { Product, WithContext } from "schema-dts";\n\nconst jsonLd: WithContext<Product> = {\n    "@context": "https://schema.org",\n    "@type": "Product",\n    name: "Next.js Sticker",\n    image: "https://nextjs.org/imgs/sticker.png",\n    description: "Dynamic at the speed of static.",\n};\n')))}c.isMDXComponent=!0}}]);