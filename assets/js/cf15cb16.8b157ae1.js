"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[5692],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>g});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),d=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},l=function(e){var t=d(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),c=d(r),h=a,g=c["".concat(p,".").concat(h)]||c[h]||u[h]||i;return r?n.createElement(g,o(o({ref:t},l),{},{components:r})):n.createElement(g,o({ref:t},l))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=h;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[c]="string"==typeof e?e:a,o[1]=s;for(var d=2;d<i;d++)o[d]=r[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},6227:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var n=r(7462),a=(r(7294),r(3905));const i={sidebar_position:4,title:"getServerSideProps",description:"Fetch data on each request with `getServerSideProps`."},o=void 0,s={unversionedId:"pages/building-your-application/data-fetching/get-server-side-props",id:"pages/building-your-application/data-fetching/get-server-side-props",title:"getServerSideProps",description:"Fetch data on each request with `getServerSideProps`.",source:"@site/docs/03-pages/01-building-your-application/03-data-fetching/03-get-server-side-props.mdx",sourceDirName:"03-pages/01-building-your-application/03-data-fetching",slug:"/pages/building-your-application/data-fetching/get-server-side-props",permalink:"/nano-nextjs-study/docs/pages/building-your-application/data-fetching/get-server-side-props",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/03-pages/01-building-your-application/03-data-fetching/03-get-server-side-props.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"getServerSideProps",description:"Fetch data on each request with `getServerSideProps`."},sidebar:"tutorialSidebar",previous:{title:"Forms and Mutations",permalink:"/nano-nextjs-study/docs/pages/building-your-application/data-fetching/forms-and-mutations"},next:{title:"Incremental Static Regeneration",permalink:"/nano-nextjs-study/docs/pages/building-your-application/data-fetching/incremental-static-regeneration"}},p={},d=[{value:"When does getServerSideProps run",id:"when-does-getserversideprops-run",level:2},{value:"When should I use getServerSideProps",id:"when-should-i-use-getserversideprops",level:2},{value:"getServerSideProps or API Routes",id:"getserversideprops-or-api-routes",level:3},{value:"getServerSideProps with Edge API Routes",id:"getserversideprops-with-edge-api-routes",level:3},{value:"Fetching data on the client side",id:"fetching-data-on-the-client-side",level:2},{value:"Using getServerSideProps to fetch data at request time",id:"using-getserversideprops-to-fetch-data-at-request-time",level:2},{value:"Caching with Server-Side Rendering (SSR)",id:"caching-with-server-side-rendering-ssr",level:2},{value:"Does getServerSideProps render an error page",id:"does-getserversideprops-render-an-error-page",level:2}],l={toc:d},c="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"If you export a function called ",(0,a.kt)("inlineCode",{parentName:"p"},"getServerSideProps")," (Server-Side Rendering) from a page, Next.js will pre-render this page on each request using the data returned by ",(0,a.kt)("inlineCode",{parentName:"p"},"getServerSideProps"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'filename="pages/index.tsx" switcher',filename:'"pages/index.tsx"',switcher:!0},'import type { InferGetServerSidePropsType, GetServerSideProps } from "next";\n\ntype Repo = {\n    name: string;\n    stargazers_count: number;\n};\n\nexport const getServerSideProps = (async (context) => {\n    const res = await fetch("https://api.github.com/repos/vercel/next.js");\n    const repo = await res.json();\n    return { props: { repo } };\n}) satisfies GetServerSideProps<{\n    repo: Repo;\n}>;\n\nexport default function Page({\n    repo,\n}: InferGetServerSidePropsType<typeof getServerSideProps>) {\n    return repo.stargazers_count;\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'filename="pages/index.js" switcher',filename:'"pages/index.js"',switcher:!0},'export async function getServerSideProps() {\n    const res = await fetch("https://api.github.com/repos/vercel/next.js");\n    const repo = await res.json();\n    return { props: { repo } };\n}\n\nexport default function Page({ repo }) {\n    return repo.stargazers_count;\n}\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note that irrespective of rendering type, any ",(0,a.kt)("inlineCode",{parentName:"p"},"props")," will be passed to the page component and can be viewed on the client-side in the initial HTML. This is to allow the page to be ",(0,a.kt)("a",{parentName:"p",href:"https://react.dev/reference/react-dom/hydrate"},"hydrated")," correctly. Make sure that you don't pass any sensitive information that shouldn't be available on the client in ",(0,a.kt)("inlineCode",{parentName:"p"},"props"),".")),(0,a.kt)("h2",{id:"when-does-getserversideprops-run"},"When does getServerSideProps run"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"getServerSideProps")," only runs on server-side and never runs on the browser. If a page uses ",(0,a.kt)("inlineCode",{parentName:"p"},"getServerSideProps"),", then:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"When you request this page directly, ",(0,a.kt)("inlineCode",{parentName:"li"},"getServerSideProps")," runs at request time, and this page will be pre-rendered with the returned props"),(0,a.kt)("li",{parentName:"ul"},"When you request this page on client-side page transitions through ",(0,a.kt)("a",{parentName:"li",href:"/docs/pages/api-reference/components/link"},(0,a.kt)("inlineCode",{parentName:"a"},"next/link"))," or ",(0,a.kt)("a",{parentName:"li",href:"/docs/pages/api-reference/functions/use-router"},(0,a.kt)("inlineCode",{parentName:"a"},"next/router")),", Next.js sends an API request to the server, which runs ",(0,a.kt)("inlineCode",{parentName:"li"},"getServerSideProps"))),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"getServerSideProps")," returns JSON which will be used to render the page. All this work will be handled automatically by Next.js, so you don\u2019t need to do anything extra as long as you have ",(0,a.kt)("inlineCode",{parentName:"p"},"getServerSideProps")," defined."),(0,a.kt)("p",null,"You can use the ",(0,a.kt)("a",{parentName:"p",href:"https://next-code-elimination.vercel.app/"},"next-code-elimination tool")," to verify what Next.js eliminates from the client-side bundle."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"getServerSideProps")," can only be exported from a ",(0,a.kt)("strong",{parentName:"p"},"page"),". You can\u2019t export it from non-page files."),(0,a.kt)("p",null,"Note that you must export ",(0,a.kt)("inlineCode",{parentName:"p"},"getServerSideProps")," as a standalone function \u2014 it will ",(0,a.kt)("strong",{parentName:"p"},"not")," work if you add ",(0,a.kt)("inlineCode",{parentName:"p"},"getServerSideProps")," as a property of the page component."),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"/docs/pages/api-reference/functions/get-server-side-props"},(0,a.kt)("inlineCode",{parentName:"a"},"getServerSideProps")," API reference")," covers all parameters and props that can be used with ",(0,a.kt)("inlineCode",{parentName:"p"},"getServerSideProps"),"."),(0,a.kt)("h2",{id:"when-should-i-use-getserversideprops"},"When should I use getServerSideProps"),(0,a.kt)("p",null,"You should use ",(0,a.kt)("inlineCode",{parentName:"p"},"getServerSideProps")," only if you need to render a page whose data must be fetched at request time. This could be due to the nature of the data or properties of the request (such as ",(0,a.kt)("inlineCode",{parentName:"p"},"authorization")," headers or geo location). Pages using ",(0,a.kt)("inlineCode",{parentName:"p"},"getServerSideProps")," will be server side rendered at request time and only be cached if ",(0,a.kt)("a",{parentName:"p",href:"/docs/pages/building-your-application/deploying/production-checklist#caching"},"cache-control headers are configured"),"."),(0,a.kt)("p",null,"If you do not need to render the data during the request, then you should consider fetching data on the ",(0,a.kt)("a",{parentName:"p",href:"#fetching-data-on-the-client-side"},"client side")," or ",(0,a.kt)("a",{parentName:"p",href:"/docs/pages/building-your-application/data-fetching/get-static-props"},(0,a.kt)("inlineCode",{parentName:"a"},"getStaticProps")),"."),(0,a.kt)("h3",{id:"getserversideprops-or-api-routes"},"getServerSideProps or API Routes"),(0,a.kt)("p",null,"It can be tempting to reach for an ",(0,a.kt)("a",{parentName:"p",href:"/docs/pages/building-your-application/routing/api-routes"},"API Route")," when you want to fetch data from the server, then call that API route from ",(0,a.kt)("inlineCode",{parentName:"p"},"getServerSideProps"),". This is an unnecessary and inefficient approach, as it will cause an extra request to be made due to both ",(0,a.kt)("inlineCode",{parentName:"p"},"getServerSideProps")," and API Routes running on the server."),(0,a.kt)("p",null,"Take the following example. An API route is used to fetch some data from a CMS. That API route is then called directly from ",(0,a.kt)("inlineCode",{parentName:"p"},"getServerSideProps"),". This produces an additional call, reducing performance. Instead, directly import the logic used inside your API Route into ",(0,a.kt)("inlineCode",{parentName:"p"},"getServerSideProps"),". This could mean calling a CMS, database, or other API directly from inside ",(0,a.kt)("inlineCode",{parentName:"p"},"getServerSideProps"),"."),(0,a.kt)("h3",{id:"getserversideprops-with-edge-api-routes"},"getServerSideProps with Edge API Routes"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"getServerSideProps")," can be used with both ",(0,a.kt)("a",{parentName:"p",href:"/docs/pages/building-your-application/rendering/edge-and-nodejs-runtimes"},"Serverless and Edge Runtimes"),", and you can set props in both. However, currently in the Edge Runtime, you do not have access to the response object. This means that you cannot \u2014 for example \u2014 add cookies in ",(0,a.kt)("inlineCode",{parentName:"p"},"getServerSideProps"),". To have access to the response object, you should ",(0,a.kt)("strong",{parentName:"p"},"continue to use the Node.js runtime"),", which is the default runtime."),(0,a.kt)("p",null,"You can explicitly set the runtime on a per-page basis by modifying the ",(0,a.kt)("inlineCode",{parentName:"p"},"config"),", for example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'filename="pages/index.js"',filename:'"pages/index.js"'},'export const config = {\n    runtime: "nodejs", // or "edge"\n};\n\nexport const getServerSideProps = async () => {};\n')),(0,a.kt)("h2",{id:"fetching-data-on-the-client-side"},"Fetching data on the client side"),(0,a.kt)("p",null,"If your page contains frequently updating data, and you don\u2019t need to pre-render the data, you can fetch the data on the ",(0,a.kt)("a",{parentName:"p",href:"/docs/pages/building-your-application/data-fetching/client-side"},"client side"),". An example of this is user-specific data:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"First, immediately show the page without data. Parts of the page can be pre-rendered using Static Generation. You can show loading states for missing data"),(0,a.kt)("li",{parentName:"ul"},"Then, fetch the data on the client side and display it when ready")),(0,a.kt)("p",null,"This approach works well for user dashboard pages, for example. Because a dashboard is a private, user-specific page, SEO is not relevant and the page doesn\u2019t need to be pre-rendered. The data is frequently updated, which requires request-time data fetching."),(0,a.kt)("h2",{id:"using-getserversideprops-to-fetch-data-at-request-time"},"Using getServerSideProps to fetch data at request time"),(0,a.kt)("p",null,"The following example shows how to fetch data at request time and pre-render the result."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"// This gets called on every request\nexport async function getServerSideProps() {\n    // Fetch data from external API\n    const res = await fetch(`https://.../data`);\n    const data = await res.json();\n\n    // Pass data to the page via props\n    return { props: { data } };\n}\n\nexport default function Page({ data }) {\n    // Render data...\n}\n")),(0,a.kt)("h2",{id:"caching-with-server-side-rendering-ssr"},"Caching with Server-Side Rendering (SSR)"),(0,a.kt)("p",null,"You can use caching headers (",(0,a.kt)("inlineCode",{parentName:"p"},"Cache-Control"),") inside ",(0,a.kt)("inlineCode",{parentName:"p"},"getServerSideProps")," to cache dynamic responses. For example, using ",(0,a.kt)("a",{parentName:"p",href:"https://web.dev/stale-while-revalidate/"},(0,a.kt)("inlineCode",{parentName:"a"},"stale-while-revalidate")),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'// This value is considered fresh for ten seconds (s-maxage=10).\n// If a request is repeated within the next 10 seconds, the previously\n// cached value will still be fresh. If the request is repeated before 59 seconds,\n// the cached value will be stale but still render (stale-while-revalidate=59).\n//\n// In the background, a revalidation request will be made to populate the cache\n// with a fresh value. If you refresh the page, you will see the new value.\nexport async function getServerSideProps({ req, res }) {\n    res.setHeader(\n        "Cache-Control",\n        "public, s-maxage=10, stale-while-revalidate=59",\n    );\n\n    return {\n        props: {},\n    };\n}\n')),(0,a.kt)("p",null,"Learn more about ",(0,a.kt)("a",{parentName:"p",href:"/docs/pages/building-your-application/deploying/production-checklist#caching"},"caching"),"."),(0,a.kt)("h2",{id:"does-getserversideprops-render-an-error-page"},"Does getServerSideProps render an error page"),(0,a.kt)("p",null,"If an error is thrown inside ",(0,a.kt)("inlineCode",{parentName:"p"},"getServerSideProps"),", it will show the ",(0,a.kt)("inlineCode",{parentName:"p"},"pages/500.js")," file. Check out the documentation for ",(0,a.kt)("a",{parentName:"p",href:"/docs/pages/building-your-application/routing/custom-error#500-page"},"500 page")," to learn more on how to create it. During development this file will not be used and the dev overlay will be shown instead."))}u.isMDXComponent=!0}}]);