"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[1558],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=s(n),u=i,g=m["".concat(p,".").concat(u)]||m[u]||c[u]||o;return n?a.createElement(g,r(r({ref:t},d),{},{components:n})):a.createElement(g,r({ref:t},d))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:i,r[1]=l;for(var s=2;s<o;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1187:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(7462),i=(n(7294),n(3905));const o={sidebar_position:3,title:"Migrating from Vite",description:"Learn how to migrate your existing React application from Vite to Next.js."},r=void 0,l={unversionedId:"app/building-your-application/upgrading/from-vite",id:"app/building-your-application/upgrading/from-vite",title:"Migrating from Vite",description:"Learn how to migrate your existing React application from Vite to Next.js.",source:"@site/docs/02-app/01-building-your-application/09-upgrading/03-from-vite.mdx",sourceDirName:"02-app/01-building-your-application/09-upgrading",slug:"/app/building-your-application/upgrading/from-vite",permalink:"/docs/app/building-your-application/upgrading/from-vite",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/02-app/01-building-your-application/09-upgrading/03-from-vite.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Migrating from Vite",description:"Learn how to migrate your existing React application from Vite to Next.js."},sidebar:"nextJsSidebar",previous:{title:"App Router Migration",permalink:"/docs/app/building-your-application/upgrading/app-router-migration"},next:{title:"API Reference",permalink:"/docs/app/api-reference/"}},p={},s=[{value:"Why Switch?",id:"why-switch",level:2},{value:"Migration Steps",id:"migration-steps",level:2},{value:"Step 1: Install the Next.js Dependency",id:"step-1-install-the-nextjs-dependency",level:3},{value:"Step 2: Create the Next.js Configuration File",id:"step-2-create-the-nextjs-configuration-file",level:3},{value:"Step 3: Update TypeScript Configuration",id:"step-3-update-typescript-configuration",level:3},{value:"Step 4: Create the Root Layout",id:"step-4-create-the-root-layout",level:3},{value:"Step 5: Create the Entrypoint Page",id:"step-5-create-the-entrypoint-page",level:3},{value:"Step 6: Update Static Image Imports",id:"step-6-update-static-image-imports",level:3},{value:"Step 7: Migrate the Environment Variables",id:"step-7-migrate-the-environment-variables",level:3},{value:"Step 8: Update Scripts in <code>package.json</code>",id:"step-8-update-scripts-in-packagejson",level:3},{value:"Step 9: Clean Up",id:"step-9-clean-up",level:3},{value:"Next Steps",id:"next-steps",level:2}],d={toc:s},m="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This guide will help you migrate an existing Vite application to Next.js."),(0,i.kt)("h2",{id:"why-switch"},"Why Switch?"),(0,i.kt)("p",null,"There are several reasons why you might want to switch from Vite to Next.js:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Slow initial page loading time"),": If you have built your application with the ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/vitejs/vite-plugin-react/tree/main/packages/plugin-react"},"default Vite\nplugin for React"),",\nyour application is a purely client-side application. Client-side only applications, also known as\nsingle-page applications (SPAs), often experience slow initial page loading time. This\nhappens due to a couple of reasons:",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"The browser needs to wait for the React code and your entire application bundle to download\nand run before your code is able to send requests to load some data."),(0,i.kt)("li",{parentName:"ol"},"Your application code grows with every new feature and extra dependency you add."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"No automatic code splitting"),": The previous issue of slow loading times can be somewhat managed with code splitting.\nHowever, if you try to do code splitting manually, you'll often make performance worse. It's easy\nto inadvertently introduce network waterfalls when code-splitting manually. Next.js provides\nautomatic code splitting built into its router."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Network waterfalls"),": A common cause of poor performance occurs when applications make\nsequential client-server requests to fetch data. One common pattern for data fetching in an SPA\nis to initially render a placeholder, and then fetch data after the component has mounted.\nUnfortunately, this means that a child component that fetches data can't start fetching until\nthe parent component has finished loading its own data. On Next.js,\n",(0,i.kt)("a",{parentName:"li",href:"https://github.com/reactjs/rfcs/blob/main/text/0188-server-components.md#no-client-server-waterfalls"},"this issue is resolved"),"\nby fetching data in Server Components."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Fast and intentional loading states"),": Thanks to built-in support for\n",(0,i.kt)("a",{parentName:"li",href:"/docs/app/building-your-application/routing/loading-ui-and-streaming#streaming-with-suspense"},"Streaming with Suspense"),",\nwith Next.js, you can be more intentional about which parts of your UI you want to load first and\nin what order without introducing network waterfalls. This enables you to build pages that are\nfaster to load and also eliminate ",(0,i.kt)("a",{parentName:"li",href:"https://web.dev/cls/"},"layout shifts"),"."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Choose the data fetching strategy"),": Depending on your needs, Next.js allows you to choose your\ndata fetching strategy on a page and component basis. You can decide to fetch at build time, at\nrequest time on the server, or on the client. For example, you can fetch data from your CMS and\nrender your blog posts at build time, which can then be efficiently cached on a CDN."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Middleware"),": ",(0,i.kt)("a",{parentName:"li",href:"/docs/app/building-your-application/routing/middleware"},"Next.js Middleware"),"\nallows you to run code on the server before a request is completed. This is especially useful to\navoid having a flash of unauthenticated content when the user visits an authenticated-only page\nby redirecting the user to a login page. The middleware is also useful for experimentation and\ninternationalization."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Built-in Optimizations"),": Images, fonts, and third-party scripts often have significant impact\non an application's performance. Next.js comes with built-in components that automatically\noptimize those for you.")),(0,i.kt)("h2",{id:"migration-steps"},"Migration Steps"),(0,i.kt)("p",null,"Our goal with this migration is to get a working Next.js application as quickly as possible, so that\nyou can then adopt Next.js features incrementally. To begin with, we'll keep it as a purely\nclient-side application (SPA) without migrating your existing router. This helps minimize the\nchances of encountering issues during the migration process and reduces merge conflicts."),(0,i.kt)("h3",{id:"step-1-install-the-nextjs-dependency"},"Step 1: Install the Next.js Dependency"),(0,i.kt)("p",null,"The first thing you need to do is to install ",(0,i.kt)("inlineCode",{parentName:"p"},"next")," as a dependency:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'filename="Terminal"',filename:'"Terminal"'},"npm install next@latest\n")),(0,i.kt)("h3",{id:"step-2-create-the-nextjs-configuration-file"},"Step 2: Create the Next.js Configuration File"),(0,i.kt)("p",null,"Create a ",(0,i.kt)("inlineCode",{parentName:"p"},"next.config.mjs")," at the root of your project. This file will hold your\n",(0,i.kt)("a",{parentName:"p",href:"/docs/app/api-reference/next-config-js"},"Next.js configuration options"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'filename="next.config.mjs"',filename:'"next.config.mjs"'},'/** @type {import(\'next\').NextConfig} */\nconst nextConfig = {\n    output: "export", // Outputs a Single-Page Application (SPA).\n    distDir: "./dist", // Changes the build output directory to `./dist/`.\n};\n\nexport default nextConfig;\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Good to know:")," You can use either ",(0,i.kt)("inlineCode",{parentName:"p"},".js")," or ",(0,i.kt)("inlineCode",{parentName:"p"},".mjs")," for your Next.js configuration file.")),(0,i.kt)("h3",{id:"step-3-update-typescript-configuration"},"Step 3: Update TypeScript Configuration"),(0,i.kt)("p",null,"If you're using TypeScript, you need to update your ",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," file with the following changes\nto make it compatible with Next.js. If you're not using TypeScript, you can skip this step."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Remove the ",(0,i.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/tsconfig#references"},"project reference")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"tsconfig.node.json")),(0,i.kt)("li",{parentName:"ol"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"./dist/types/**/*.ts")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"./next-env.d.ts")," to the ",(0,i.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/tsconfig#include"},(0,i.kt)("inlineCode",{parentName:"a"},"include")," array")),(0,i.kt)("li",{parentName:"ol"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"./node_modules")," to the ",(0,i.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/tsconfig#exclude"},(0,i.kt)("inlineCode",{parentName:"a"},"exclude")," array")),(0,i.kt)("li",{parentName:"ol"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},'{ "name": "next" }')," to the ",(0,i.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/tsconfig#plugins"},(0,i.kt)("inlineCode",{parentName:"a"},"plugins")," array in ",(0,i.kt)("inlineCode",{parentName:"a"},"compilerOptions")),": ",(0,i.kt)("inlineCode",{parentName:"li"},'"plugins": [{ "name": "next" }]')),(0,i.kt)("li",{parentName:"ol"},"Set ",(0,i.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/tsconfig#esModuleInterop"},(0,i.kt)("inlineCode",{parentName:"a"},"esModuleInterop"))," to ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),": ",(0,i.kt)("inlineCode",{parentName:"li"},'"esModuleInterop": true')),(0,i.kt)("li",{parentName:"ol"},"Set ",(0,i.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/tsconfig#jsx"},(0,i.kt)("inlineCode",{parentName:"a"},"jsx"))," to ",(0,i.kt)("inlineCode",{parentName:"li"},"preserve"),": ",(0,i.kt)("inlineCode",{parentName:"li"},'"jsx": "preserve"')),(0,i.kt)("li",{parentName:"ol"},"Set ",(0,i.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/tsconfig#allowJs"},(0,i.kt)("inlineCode",{parentName:"a"},"allowJs"))," to ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),": ",(0,i.kt)("inlineCode",{parentName:"li"},'"allowJs": true')),(0,i.kt)("li",{parentName:"ol"},"Set ",(0,i.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/tsconfig#forceConsistentCasingInFileNames"},(0,i.kt)("inlineCode",{parentName:"a"},"forceConsistentCasingInFileNames"))," to ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),": ",(0,i.kt)("inlineCode",{parentName:"li"},'"forceConsistentCasingInFileNames": true')),(0,i.kt)("li",{parentName:"ol"},"Set ",(0,i.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/tsconfig#incremental"},(0,i.kt)("inlineCode",{parentName:"a"},"incremental"))," to ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),": ",(0,i.kt)("inlineCode",{parentName:"li"},'"incremental": true'))),(0,i.kt)("p",null,"Here's an example of a working ",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," with those changes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'filename="tsconfig.json"',filename:'"tsconfig.json"'},'{\n    "compilerOptions": {\n        "target": "ES2020",\n        "useDefineForClassFields": true,\n        "lib": ["ES2020", "DOM", "DOM.Iterable"],\n        "module": "ESNext",\n        "esModuleInterop": true,\n        "skipLibCheck": true,\n        "moduleResolution": "bundler",\n        "allowImportingTsExtensions": true,\n        "resolveJsonModule": true,\n        "isolatedModules": true,\n        "noEmit": true,\n        "jsx": "preserve",\n        "strict": true,\n        "noUnusedLocals": true,\n        "noUnusedParameters": true,\n        "noFallthroughCasesInSwitch": true,\n        "allowJs": true,\n        "forceConsistentCasingInFileNames": true,\n        "incremental": true,\n        "plugins": [{ "name": "next" }]\n    },\n    "include": ["./src", "./dist/types/**/*.ts", "./next-env.d.ts"],\n    "exclude": ["./node_modules"]\n}\n')),(0,i.kt)("p",null,"You can find more information about configuring TypeScript on the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/app/building-your-application/configuring/typescript#typescript-plugin"},"Next.js docs"),"."),(0,i.kt)("h3",{id:"step-4-create-the-root-layout"},"Step 4: Create the Root Layout"),(0,i.kt)("p",null,"A Next.js ",(0,i.kt)("a",{parentName:"p",href:"/docs/app"},"App Router")," application must include a\n",(0,i.kt)("a",{parentName:"p",href:"/docs/app/building-your-application/routing/pages-and-layouts#root-layout-required"},"root layout"),"\nfile, which is a ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/building-your-application/rendering/server-components"},"React Server Component"),"\nthat will wrap all pages in your application. This file is defined at the top level of the ",(0,i.kt)("inlineCode",{parentName:"p"},"app"),"\ndirectory."),(0,i.kt)("p",null,"The closest equivalent to the root layout file in a Vite application is the\n",(0,i.kt)("a",{parentName:"p",href:"https://vitejs.dev/guide/#index-html-and-project-root"},(0,i.kt)("inlineCode",{parentName:"a"},"index.html")," file"),", which contains your\n",(0,i.kt)("inlineCode",{parentName:"p"},"<html>"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"<head>"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"<body>")," tags."),(0,i.kt)("p",null,"In this step, you'll convert your ",(0,i.kt)("inlineCode",{parentName:"p"},"index.html")," file into a root layout file:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Create a new ",(0,i.kt)("inlineCode",{parentName:"li"},"app")," directory in your ",(0,i.kt)("inlineCode",{parentName:"li"},"src")," directory."),(0,i.kt)("li",{parentName:"ol"},"Create a new ",(0,i.kt)("inlineCode",{parentName:"li"},"layout.tsx")," file inside that ",(0,i.kt)("inlineCode",{parentName:"li"},"app")," directory:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'filename="app/layout.tsx" switcher',filename:'"app/layout.tsx"',switcher:!0},"export default function RootLayout({\n    children,\n}: {\n    children: React.ReactNode;\n}) {\n    return null;\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'filename="app/layout.js" switcher',filename:'"app/layout.js"',switcher:!0},"export default function RootLayout({ children }) {\n    return null;\n}\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Good to know"),": ",(0,i.kt)("inlineCode",{parentName:"p"},".js"),", ",(0,i.kt)("inlineCode",{parentName:"p"},".jsx"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},".tsx")," extensions can be used for Layout files.")),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"Copy the content of your ",(0,i.kt)("inlineCode",{parentName:"li"},"index.html")," file into the previously created ",(0,i.kt)("inlineCode",{parentName:"li"},"<RootLayout>")," component while\nreplacing the ",(0,i.kt)("inlineCode",{parentName:"li"},"body.div#root")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"body.script")," tags with ",(0,i.kt)("inlineCode",{parentName:"li"},'<div id="root">{children}</div>'),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'filename="app/layout.tsx" switcher',filename:'"app/layout.tsx"',switcher:!0},'export default function RootLayout({\n    children,\n}: {\n    children: React.ReactNode;\n}) {\n    return (\n        <html lang="en">\n            <head>\n                <meta charset="UTF-8" />\n                <link rel="icon" type="image/svg+xml" href="/icon.svg" />\n                <meta\n                    name="viewport"\n                    content="width=device-width, initial-scale=1.0"\n                />\n                <title>My App</title>\n                <meta name="description" content="My App is a..." />\n            </head>\n            <body>\n                <div id="root">{children}</div>\n            </body>\n        </html>\n    );\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'filename="app/layout.js" switcher',filename:'"app/layout.js"',switcher:!0},'export default function RootLayout({ children }) {\n    return (\n        <html lang="en">\n            <head>\n                <meta charset="UTF-8" />\n                <link rel="icon" type="image/svg+xml" href="/icon.svg" />\n                <meta\n                    name="viewport"\n                    content="width=device-width, initial-scale=1.0"\n                />\n                <title>My App</title>\n                <meta name="description" content="My App is a..." />\n            </head>\n            <body>\n                <div id="root">{children}</div>\n            </body>\n        </html>\n    );\n}\n')),(0,i.kt)("ol",{start:4},(0,i.kt)("li",{parentName:"ol"},"Next.js already includes by default the\n",(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/docs/Web/HTML/Element/meta#charset"},"meta charset")," and\n",(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/docs/Web/HTML/Viewport_meta_tag"},"meta viewport")," tags, so you\ncan safely remove those from your ",(0,i.kt)("inlineCode",{parentName:"li"},"<head>"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'filename="app/layout.tsx" switcher',filename:'"app/layout.tsx"',switcher:!0},'export default function RootLayout({\n    children,\n}: {\n    children: React.ReactNode;\n}) {\n    return (\n        <html lang="en">\n            <head>\n                <link rel="icon" type="image/svg+xml" href="/icon.svg" />\n                <title>My App</title>\n                <meta name="description" content="My App is a..." />\n            </head>\n            <body>\n                <div id="root">{children}</div>\n            </body>\n        </html>\n    );\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'filename="app/layout.js" switcher',filename:'"app/layout.js"',switcher:!0},'export default function RootLayout({ children }) {\n    return (\n        <html lang="en">\n            <head>\n                <link rel="icon" type="image/svg+xml" href="/icon.svg" />\n                <title>My App</title>\n                <meta name="description" content="My App is a..." />\n            </head>\n            <body>\n                <div id="root">{children}</div>\n            </body>\n        </html>\n    );\n}\n')),(0,i.kt)("ol",{start:5},(0,i.kt)("li",{parentName:"ol"},"Any ",(0,i.kt)("a",{parentName:"li",href:"/docs/app/building-your-application/optimizing/metadata#file-based-metadata"},"metadata files"),"\nsuch as ",(0,i.kt)("inlineCode",{parentName:"li"},"favicon.ico"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"icon.png"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"robots.txt")," are automatically added to the application\n",(0,i.kt)("inlineCode",{parentName:"li"},"<head>")," tag as long as you have them placed into the top level of the ",(0,i.kt)("inlineCode",{parentName:"li"},"app")," directory. After\nmoving\n",(0,i.kt)("a",{parentName:"li",href:"/docs/app/building-your-application/optimizing/metadata#file-based-metadata"},"all supported files"),"\ninto the ",(0,i.kt)("inlineCode",{parentName:"li"},"app")," directory you can safely delete their ",(0,i.kt)("inlineCode",{parentName:"li"},"<link>")," tags:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'filename="app/layout.tsx" switcher',filename:'"app/layout.tsx"',switcher:!0},'export default function RootLayout({\n    children,\n}: {\n    children: React.ReactNode;\n}) {\n    return (\n        <html lang="en">\n            <head>\n                <title>My App</title>\n                <meta name="description" content="My App is a..." />\n            </head>\n            <body>\n                <div id="root">{children}</div>\n            </body>\n        </html>\n    );\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'filename="app/layout.js" switcher',filename:'"app/layout.js"',switcher:!0},'export default function RootLayout({ children }) {\n    return (\n        <html lang="en">\n            <head>\n                <title>My App</title>\n                <meta name="description" content="My App is a..." />\n            </head>\n            <body>\n                <div id="root">{children}</div>\n            </body>\n        </html>\n    );\n}\n')),(0,i.kt)("ol",{start:6},(0,i.kt)("li",{parentName:"ol"},"Finally, Next.js can manage your last ",(0,i.kt)("inlineCode",{parentName:"li"},"<head>")," tags with the\n",(0,i.kt)("a",{parentName:"li",href:"/docs/app/building-your-application/optimizing/metadata"},"Metadata API"),". Move your final metadata\ninfo into an exported\n",(0,i.kt)("a",{parentName:"li",href:"/docs/app/api-reference/functions/generate-metadata#metadata-object"},(0,i.kt)("inlineCode",{parentName:"a"},"metadata")," object"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'filename="app/layout.tsx" switcher',filename:'"app/layout.tsx"',switcher:!0},'import type { Metadata } from "next";\n\nexport const metadata: Metadata = {\n    title: "My App",\n    description: "My App is a...",\n};\n\nexport default function RootLayout({\n    children,\n}: {\n    children: React.ReactNode;\n}) {\n    return (\n        <html lang="en">\n            <body>\n                <div id="root">{children}</div>\n            </body>\n        </html>\n    );\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'filename="app/layout.js" switcher',filename:'"app/layout.js"',switcher:!0},'export const metadata = {\n    title: "My App",\n    description: "My App is a...",\n};\n\nexport default function RootLayout({ children }) {\n    return (\n        <html lang="en">\n            <body>\n                <div id="root">{children}</div>\n            </body>\n        </html>\n    );\n}\n')),(0,i.kt)("p",null,"With the above changes, you shifted from declaring everything in your ",(0,i.kt)("inlineCode",{parentName:"p"},"index.html")," to using Next.js'\nconvention-based approach built into the framework\n(",(0,i.kt)("a",{parentName:"p",href:"/docs/app/building-your-application/optimizing/metadata"},"Metadata API"),"). This approach enables you\nto more easily improve your SEO and web shareability of your pages."),(0,i.kt)("h3",{id:"step-5-create-the-entrypoint-page"},"Step 5: Create the Entrypoint Page"),(0,i.kt)("p",null,"On Next.js you declare an entrypoint for your application by creating a ",(0,i.kt)("inlineCode",{parentName:"p"},"page.tsx")," file. The\nclosest equivalent of this file on Vite is your ",(0,i.kt)("inlineCode",{parentName:"p"},"main.tsx")," file. In this step, you\u2019ll set up the\nentrypoint of your application."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Create a ",(0,i.kt)("inlineCode",{parentName:"strong"},"[[...slug]]")," directory in your ",(0,i.kt)("inlineCode",{parentName:"strong"},"app")," directory."))),(0,i.kt)("p",null,"Since in this guide we're aiming first to set up our Next.js as an SPA (Single Page Application),\nyou need your page entrypoint to catch all possible routes of your application. For that, create a\nnew ",(0,i.kt)("inlineCode",{parentName:"p"},"[[...slug]]")," directory in your ",(0,i.kt)("inlineCode",{parentName:"p"},"app")," directory."),(0,i.kt)("p",null,"This directory is what is called an\n",(0,i.kt)("a",{parentName:"p",href:"/docs/app/building-your-application/routing/dynamic-routes#optional-catch-all-segments"},"optional catch-all route segment"),".\nNext.js uses a file-system based router where\n",(0,i.kt)("a",{parentName:"p",href:"/docs/app/building-your-application/routing/defining-routes#creating-routes"},"directories are used to define routes"),".\nThis special directory will make sure that all routes of your application will be directed to its\ncontaining ",(0,i.kt)("inlineCode",{parentName:"p"},"page.tsx")," file."),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Create a new ",(0,i.kt)("inlineCode",{parentName:"strong"},"page.tsx")," file inside the ",(0,i.kt)("inlineCode",{parentName:"strong"},"app/[[...slug]]")," directory with the following content:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'filename="app/[[...slug]]/page.tsx" switcher',filename:'"app/[[...slug]]/page.tsx"',switcher:!0},'"use client";\n\nimport dynamic from "next/dynamic";\nimport "../../index.css";\n\nconst App = dynamic(() => import("../../App"), { ssr: false });\n\nexport default function Page() {\n    return <App />;\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'filename="app/[[...slug]]/page.js" switcher',filename:'"app/[[...slug]]/page.js"',switcher:!0},'"use client";\n\nimport dynamic from "next/dynamic";\nimport "../../index.css";\n\nconst App = dynamic(() => import("../../App"), { ssr: false });\n\nexport default function Page() {\n    return <App />;\n}\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Good to know"),": ",(0,i.kt)("inlineCode",{parentName:"p"},".js"),", ",(0,i.kt)("inlineCode",{parentName:"p"},".jsx"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},".tsx")," extensions can be used for Page files.")),(0,i.kt)("p",null,"This file contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"<Page>")," component which is marked as a\n",(0,i.kt)("a",{parentName:"p",href:"/docs/app/building-your-application/rendering/client-components"},"Client Component")," by the ",(0,i.kt)("inlineCode",{parentName:"p"},"'use client'"),"\ndirective. Without that directive, the component would have been a\n",(0,i.kt)("a",{parentName:"p",href:"/docs/app/building-your-application/rendering/server-components"},"Server Component"),"."),(0,i.kt)("p",null,"In Next.js, Client Components are ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/building-your-application/rendering/client-components#how-are-client-components-rendered"},"prerendered to HTML"),"\non the server before being sent to the client, but since we want to first have a purely client-side\napplication, you need to tell Next.js to disable the prerendering for the ",(0,i.kt)("inlineCode",{parentName:"p"},"<App>")," component by\ndynamically importing it with the ",(0,i.kt)("inlineCode",{parentName:"p"},"ssr")," option set to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'const App = dynamic(() => import("../../App"), { ssr: false });\n')),(0,i.kt)("h3",{id:"step-6-update-static-image-imports"},"Step 6: Update Static Image Imports"),(0,i.kt)("p",null,"Next.js handles static image imports slightly different from Vite. With Vite, importing an image\nfile will return its public URL as a string:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'filename="App.tsx"',filename:'"App.tsx"'},"import image from \"./img.png\"; // `image` will be '/assets/img.2d8efhg.png' in production\n\nexport default function App() {\n    return <img src={image} />;\n}\n")),(0,i.kt)("p",null,"With Next.js, static image imports return an object. The object can then be used directly with the\nNext.js ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/api-reference/components/image"},(0,i.kt)("inlineCode",{parentName:"a"},"<Image>")," component"),", or you can use the object's\n",(0,i.kt)("inlineCode",{parentName:"p"},"src")," property with your existing ",(0,i.kt)("inlineCode",{parentName:"p"},"<img>")," tag."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"<Image>")," component has the added benefits of\n",(0,i.kt)("a",{parentName:"p",href:"/docs/app/building-your-application/optimizing/images"},"automatic image optimization"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"<Image>"),"\ncomponent automatically sets the ",(0,i.kt)("inlineCode",{parentName:"p"},"width")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"height")," attributes of the resulting ",(0,i.kt)("inlineCode",{parentName:"p"},"<img>")," based on\nthe image's dimensions. This prevents layout shifts when the image loads. However, this can cause\nissues if your app contains images with only one of their dimensions being styled without the other\nstyled to ",(0,i.kt)("inlineCode",{parentName:"p"},"auto"),". When not styled to ",(0,i.kt)("inlineCode",{parentName:"p"},"auto"),", the dimension will default to the ",(0,i.kt)("inlineCode",{parentName:"p"},"<img>")," dimension\nattribute's value, which can cause the image to appear distorted."),(0,i.kt)("p",null,"Keeping the ",(0,i.kt)("inlineCode",{parentName:"p"},"<img>")," tag will reduce the amount of changes in your application and prevent the above\nissues. However, you'll still want to later migrate to the ",(0,i.kt)("inlineCode",{parentName:"p"},"<Image>")," component to take advantage of\nthe automatic optimizations."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Convert absolute import paths for images imported from ",(0,i.kt)("inlineCode",{parentName:"strong"},"/public")," into relative imports:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'// Before\nimport logo from "/logo.png";\n\n// After\nimport logo from "../public/logo.png";\n')),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Pass the image ",(0,i.kt)("inlineCode",{parentName:"strong"},"src")," property instead of the whole image object to your ",(0,i.kt)("inlineCode",{parentName:"strong"},"<img>")," tag:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"// Before\n<img src={logo} />\n\n// After\n<img src={logo.src} />\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Warning:")," If you're using TypeScript, you might encounter type errors when accessing the ",(0,i.kt)("inlineCode",{parentName:"p"},"src"),"\nproperty. You can safely ignore those for now. They will be fixed by the end of this guide.")),(0,i.kt)("h3",{id:"step-7-migrate-the-environment-variables"},"Step 7: Migrate the Environment Variables"),(0,i.kt)("p",null,"Next.js has support for ",(0,i.kt)("inlineCode",{parentName:"p"},".env"),"\n",(0,i.kt)("a",{parentName:"p",href:"/docs/app/building-your-application/configuring/environment-variables"},"environment variables"),"\nsimilar to Vite. The main difference is the prefix used to expose environment variables on the\nclient-side."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Change all environment variables with the ",(0,i.kt)("inlineCode",{parentName:"li"},"VITE_")," prefix to ",(0,i.kt)("inlineCode",{parentName:"li"},"NEXT_PUBLIC_"),".")),(0,i.kt)("p",null,"Vite exposes a few built-in environment variables on the special ",(0,i.kt)("inlineCode",{parentName:"p"},"import.meta.env")," object which\naren\u2019t supported by Next.js. You need to update their usage as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"import.meta.env.MODE")," \u21d2 ",(0,i.kt)("inlineCode",{parentName:"li"},"process.env.NODE_ENV")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"import.meta.env.PROD")," \u21d2 ",(0,i.kt)("inlineCode",{parentName:"li"},"process.env.NODE_ENV === 'production'")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"import.meta.env.DEV")," \u21d2 ",(0,i.kt)("inlineCode",{parentName:"li"},"process.env.NODE_ENV !== 'production'")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"import.meta.env.SSR")," \u21d2 ",(0,i.kt)("inlineCode",{parentName:"li"},"typeof window !== 'undefined'"))),(0,i.kt)("p",null,"Next.js also doesn't provide a built-in ",(0,i.kt)("inlineCode",{parentName:"p"},"BASE_URL")," environment variable. However, you can still\nconfigure one, if you need it:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Add the following to your ",(0,i.kt)("inlineCode",{parentName:"strong"},".env")," file:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'filename=".env"',filename:'".env"'},'# ...\nNEXT_PUBLIC_BASE_PATH="/some-base-path"\n')),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Set ",(0,i.kt)("a",{parentName:"strong",href:"/docs/app/api-reference/next-config-js/basePath"},(0,i.kt)("inlineCode",{parentName:"a"},"basePath"))," to ",(0,i.kt)("inlineCode",{parentName:"strong"},"process.env.NEXT_PUBLIC_BASE_PATH")," in your ",(0,i.kt)("inlineCode",{parentName:"strong"},"next.config.mjs")," file:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'filename="next.config.mjs"',filename:'"next.config.mjs"'},'/** @type {import(\'next\').NextConfig} */\nconst nextConfig = {\n    output: "export", // Outputs a Single-Page Application (SPA).\n    distDir: "./dist", // Changes the build output directory to `./dist/`.\n    basePath: process.env.NEXT_PUBLIC_BASE_PATH, // Sets the base path to `/some-base-path`.\n};\n\nexport default nextConfig;\n')),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Update ",(0,i.kt)("inlineCode",{parentName:"strong"},"import.meta.env.BASE_URL")," usages to ",(0,i.kt)("inlineCode",{parentName:"strong"},"process.env.NEXT_PUBLIC_BASE_PATH")))),(0,i.kt)("h3",{id:"step-8-update-scripts-in-packagejson"},"Step 8: Update Scripts in ",(0,i.kt)("inlineCode",{parentName:"h3"},"package.json")),(0,i.kt)("p",null,"You should now be able to run your application to test if you successfully migrated to Next.js. But\nbefore that, you need to update your ",(0,i.kt)("inlineCode",{parentName:"p"},"scripts")," in your ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," with Next.js related commands,\nand add ",(0,i.kt)("inlineCode",{parentName:"p"},".next")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"next-env.d.ts")," to your ",(0,i.kt)("inlineCode",{parentName:"p"},".gitignore"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'filename="package.json"',filename:'"package.json"'},'{\n    "scripts": {\n        "dev": "next dev",\n        "build": "next build",\n        "start": "next start"\n    }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt",metastring:'filename=".gitignore"',filename:'".gitignore"'},"# ...\n.next\nnext-env.d.ts\n")),(0,i.kt)("p",null,"Now run ",(0,i.kt)("inlineCode",{parentName:"p"},"npm run dev"),", and open ",(0,i.kt)("a",{parentName:"p",href:"http://localhost:3000"},(0,i.kt)("inlineCode",{parentName:"a"},"http://localhost:3000")),". You should\nhopefully see your application now running on Next.js."),(0,i.kt)("p",null,"If your application followed a conventional Vite configuration, this is all you would need to do\nto have a working version of your application."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Example:")," Check out ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/inngest/vite-to-nextjs/pull/1"},"this pull request")," for a\nworking example of a Vite application migrated to Next.js.")),(0,i.kt)("h3",{id:"step-9-clean-up"},"Step 9: Clean Up"),(0,i.kt)("p",null,"You can now clean up your codebase from Vite related artifacts:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Delete ",(0,i.kt)("inlineCode",{parentName:"li"},"main.tsx")),(0,i.kt)("li",{parentName:"ul"},"Delete ",(0,i.kt)("inlineCode",{parentName:"li"},"index.html")),(0,i.kt)("li",{parentName:"ul"},"Delete ",(0,i.kt)("inlineCode",{parentName:"li"},"vite-env.d.ts")),(0,i.kt)("li",{parentName:"ul"},"Delete ",(0,i.kt)("inlineCode",{parentName:"li"},"tsconfig.node.json")),(0,i.kt)("li",{parentName:"ul"},"Delete ",(0,i.kt)("inlineCode",{parentName:"li"},"vite.config.ts")),(0,i.kt)("li",{parentName:"ul"},"Uninstall Vite dependencies")),(0,i.kt)("h2",{id:"next-steps"},"Next Steps"),(0,i.kt)("p",null,"If everything went according to plan, you now have a functioning Next.js application running as a\nsingle-page application. However, you aren't yet taking advantage of most of Next.js' benefits, but\nyou can now start making incremental changes to reap all the benefits. Here's what you might want to\ndo next:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Migrate from React Router to the ",(0,i.kt)("a",{parentName:"li",href:"/docs/app/building-your-application/routing"},"Next.js App Router")," to get:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Automatic code splitting"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/app/building-your-application/routing/loading-ui-and-streaming"},"Streaming Server-Rendering")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/app/building-your-application/rendering/server-components"},"React Server Components")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/app/building-your-application/optimizing/images"},"Optimize images with the ",(0,i.kt)("inlineCode",{parentName:"a"},"<Image>")," component")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/app/building-your-application/optimizing/fonts"},"Optimize fonts with ",(0,i.kt)("inlineCode",{parentName:"a"},"next/font"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/app/building-your-application/optimizing/scripts"},"Optimize third-party scripts with the ",(0,i.kt)("inlineCode",{parentName:"a"},"<Script>")," component")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/app/building-your-application/configuring/eslint"},"Update your ESLint configuration to support Next.js rules"))))}c.isMDXComponent=!0}}]);