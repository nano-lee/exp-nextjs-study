"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[2938],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),l=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(a),d=r,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return a?n.createElement(h,o(o({ref:t},c),{},{components:a})):n.createElement(h,o({ref:t},c))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[u]="string"==typeof e?e:r,o[1]=p;for(var l=2;l<i;l++)o[l]=a[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},3079:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:2,title:"Static Site Generation (SSG)",description:"Use Static Site Generation (SSG) to pre-render pages at build time."},o=void 0,p={unversionedId:"pages/building-your-application/rendering/static-site-generation",id:"pages/building-your-application/rendering/static-site-generation",title:"Static Site Generation (SSG)",description:"Use Static Site Generation (SSG) to pre-render pages at build time.",source:"@site/docs/03-pages/01-building-your-application/02-rendering/02-static-site-generation.mdx",sourceDirName:"03-pages/01-building-your-application/02-rendering",slug:"/pages/building-your-application/rendering/static-site-generation",permalink:"/docs/pages/building-your-application/rendering/static-site-generation",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/03-pages/01-building-your-application/02-rendering/02-static-site-generation.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Static Site Generation (SSG)",description:"Use Static Site Generation (SSG) to pre-render pages at build time."},sidebar:"tutorialSidebar",previous:{title:"Server-side Rendering (SSR)",permalink:"/docs/pages/building-your-application/rendering/server-side-rendering"},next:{title:"Incremental Static Regeneration (ISR)",permalink:"/docs/pages/building-your-application/rendering/incremental-static-regeneration"}},s={},l=[{value:"Static Generation without data",id:"static-generation-without-data",level:3},{value:"Static Generation with data",id:"static-generation-with-data",level:3},{value:"Scenario 1: Your page content depends on external data",id:"scenario-1-your-page-content-depends-on-external-data",level:4},{value:"Scenario 2: Your page paths depend on external data",id:"scenario-2-your-page-paths-depend-on-external-data",level:4},{value:"When should I use Static Generation?",id:"when-should-i-use-static-generation",level:3}],c={toc:l},u="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/vercel/next.js/tree/canary/examples/cms-wordpress"},"WordPress Example"),"(",(0,r.kt)("a",{parentName:"li",href:"https://next-blog-wordpress.vercel.app"},"Demo"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/vercel/next.js/tree/canary/examples/blog-starter"},"Blog Starter using markdown files")," (",(0,r.kt)("a",{parentName:"li",href:"https://next-blog-starter.vercel.app/"},"Demo"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/vercel/next.js/tree/canary/examples/cms-datocms"},"DatoCMS Example")," (",(0,r.kt)("a",{parentName:"li",href:"https://next-blog-datocms.vercel.app/"},"Demo"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/vercel/next.js/tree/canary/examples/cms-takeshape"},"TakeShape Example")," (",(0,r.kt)("a",{parentName:"li",href:"https://next-blog-takeshape.vercel.app/"},"Demo"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/vercel/next.js/tree/canary/examples/cms-sanity"},"Sanity Example")," (",(0,r.kt)("a",{parentName:"li",href:"https://next-blog-sanity.vercel.app/"},"Demo"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/vercel/next.js/tree/canary/examples/cms-prismic"},"Prismic Example")," (",(0,r.kt)("a",{parentName:"li",href:"https://next-blog-prismic.vercel.app/"},"Demo"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/vercel/next.js/tree/canary/examples/cms-contentful"},"Contentful Example")," (",(0,r.kt)("a",{parentName:"li",href:"https://next-blog-contentful.vercel.app/"},"Demo"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/vercel/next.js/tree/canary/examples/cms-strapi"},"Strapi Example")," (",(0,r.kt)("a",{parentName:"li",href:"https://next-blog-strapi.vercel.app/"},"Demo"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/vercel/next.js/tree/canary/examples/cms-prepr"},"Prepr Example")," (",(0,r.kt)("a",{parentName:"li",href:"https://next-blog-prepr.vercel.app/"},"Demo"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/vercel/next.js/tree/canary/examples/cms-agilitycms"},"Agility CMS Example")," (",(0,r.kt)("a",{parentName:"li",href:"https://next-blog-agilitycms.vercel.app/"},"Demo"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/vercel/next.js/tree/canary/examples/cms-cosmic"},"Cosmic Example")," (",(0,r.kt)("a",{parentName:"li",href:"https://next-blog-cosmic.vercel.app/"},"Demo"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/vercel/next.js/tree/canary/examples/cms-buttercms"},"ButterCMS Example")," (",(0,r.kt)("a",{parentName:"li",href:"https://next-blog-buttercms.vercel.app/"},"Demo"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/vercel/next.js/tree/canary/examples/cms-storyblok"},"Storyblok Example")," (",(0,r.kt)("a",{parentName:"li",href:"https://next-blog-storyblok.vercel.app/"},"Demo"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/vercel/next.js/tree/canary/examples/cms-graphcms"},"GraphCMS Example")," (",(0,r.kt)("a",{parentName:"li",href:"https://next-blog-graphcms.vercel.app/"},"Demo"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/vercel/next.js/tree/canary/examples/cms-kontent-ai"},"Kontent Example")," (",(0,r.kt)("a",{parentName:"li",href:"https://next-blog-kontent.vercel.app/"},"Demo"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/vercel/next.js/tree/canary/examples/cms-builder-io"},"Builder.io Example")," (",(0,r.kt)("a",{parentName:"li",href:"https://cms-builder-io.vercel.app/"},"Demo"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/vercel/next.js/tree/canary/examples/cms-tina"},"TinaCMS Example")," (",(0,r.kt)("a",{parentName:"li",href:"https://cms-tina-example.vercel.app/"},"Demo"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://static-tweet.vercel.app/"},"Static Tweet (Demo)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/vercel/next.js/tree/canary/examples/cms-enterspeed"},"Enterspeed Example")," (",(0,r.kt)("a",{parentName:"li",href:"https://next-blog-demo.enterspeed.com/"},"Demo"),")"))),(0,r.kt)("p",null,"If a page uses ",(0,r.kt)("strong",{parentName:"p"},"Static Generation"),", the page HTML is generated at ",(0,r.kt)("strong",{parentName:"p"},"build time"),". That means in production, the page HTML is generated when you run ",(0,r.kt)("inlineCode",{parentName:"p"},"next build"),". This HTML will then be reused on each request. It can be cached by a CDN."),(0,r.kt)("p",null,"In Next.js, you can statically generate pages ",(0,r.kt)("strong",{parentName:"p"},"with or without data"),". Let's take a look at each case."),(0,r.kt)("h3",{id:"static-generation-without-data"},"Static Generation without data"),(0,r.kt)("p",null,"By default, Next.js pre-renders pages using Static Generation without fetching data. Here's an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"function About() {\n    return <div>About</div>;\n}\n\nexport default About;\n")),(0,r.kt)("p",null,"Note that this page does not need to fetch any external data to be pre-rendered. In cases like this, Next.js generates a single HTML file per page during build time."),(0,r.kt)("h3",{id:"static-generation-with-data"},"Static Generation with data"),(0,r.kt)("p",null,"Some pages require fetching external data for pre-rendering. There are two scenarios, and one or both might apply. In each case, you can use these functions that Next.js provides:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Your page ",(0,r.kt)("strong",{parentName:"li"},"content")," depends on external data: Use ",(0,r.kt)("inlineCode",{parentName:"li"},"getStaticProps"),"."),(0,r.kt)("li",{parentName:"ol"},"Your page ",(0,r.kt)("strong",{parentName:"li"},"paths")," depend on external data: Use ",(0,r.kt)("inlineCode",{parentName:"li"},"getStaticPaths")," (usually in addition to ",(0,r.kt)("inlineCode",{parentName:"li"},"getStaticProps"),").")),(0,r.kt)("h4",{id:"scenario-1-your-page-content-depends-on-external-data"},"Scenario 1: Your page content depends on external data"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example"),": Your blog page might need to fetch the list of blog posts from a CMS (content management system)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"// TODO: Need to fetch `posts` (by calling some API endpoint)\n//       before this page can be pre-rendered.\nexport default function Blog({ posts }) {\n    return (\n        <ul>\n            {posts.map((post) => (\n                <li>{post.title}</li>\n            ))}\n        </ul>\n    );\n}\n")),(0,r.kt)("p",null,"To fetch this data on pre-render, Next.js allows you to ",(0,r.kt)("inlineCode",{parentName:"p"},"export")," an ",(0,r.kt)("inlineCode",{parentName:"p"},"async")," function called ",(0,r.kt)("inlineCode",{parentName:"p"},"getStaticProps")," from the same file. This function gets called at build time and lets you pass fetched data to the page's ",(0,r.kt)("inlineCode",{parentName:"p"},"props")," on pre-render."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'export default function Blog({ posts }) {\n    // Render posts...\n}\n\n// This function gets called at build time\nexport async function getStaticProps() {\n    // Call an external API endpoint to get posts\n    const res = await fetch("https://.../posts");\n    const posts = await res.json();\n\n    // By returning { props: { posts } }, the Blog component\n    // will receive `posts` as a prop at build time\n    return {\n        props: {\n            posts,\n        },\n    };\n}\n')),(0,r.kt)("p",null,"To learn more about how ",(0,r.kt)("inlineCode",{parentName:"p"},"getStaticProps")," works, check out the ",(0,r.kt)("a",{parentName:"p",href:"/docs/pages/building-your-application/data-fetching/get-static-props"},"Data Fetching documentation"),"."),(0,r.kt)("h4",{id:"scenario-2-your-page-paths-depend-on-external-data"},"Scenario 2: Your page paths depend on external data"),(0,r.kt)("p",null,"Next.js allows you to create pages with ",(0,r.kt)("strong",{parentName:"p"},"dynamic routes"),". For example, you can create a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"pages/posts/[id].js")," to show a single blog post based on ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),". This will allow you to show a blog post with ",(0,r.kt)("inlineCode",{parentName:"p"},"id: 1")," when you access ",(0,r.kt)("inlineCode",{parentName:"p"},"posts/1"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"To learn more about dynamic routing, check the ",(0,r.kt)("a",{parentName:"p",href:"/docs/pages/building-your-application/routing/dynamic-routes"},"Dynamic Routing documentation"),".")),(0,r.kt)("p",null,"However, which ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," you want to pre-render at build time might depend on external data."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example"),": suppose that you've only added one blog post (with ",(0,r.kt)("inlineCode",{parentName:"p"},"id: 1"),") to the database. In this case, you'd only want to pre-render ",(0,r.kt)("inlineCode",{parentName:"p"},"posts/1")," at build time."),(0,r.kt)("p",null,"Later, you might add the second post with ",(0,r.kt)("inlineCode",{parentName:"p"},"id: 2"),". Then you'd want to pre-render ",(0,r.kt)("inlineCode",{parentName:"p"},"posts/2")," as well."),(0,r.kt)("p",null,"So your page ",(0,r.kt)("strong",{parentName:"p"},"paths")," that are pre-rendered depend on external data. To handle this, Next.js lets you ",(0,r.kt)("inlineCode",{parentName:"p"},"export")," an ",(0,r.kt)("inlineCode",{parentName:"p"},"async")," function called ",(0,r.kt)("inlineCode",{parentName:"p"},"getStaticPaths")," from a dynamic page (",(0,r.kt)("inlineCode",{parentName:"p"},"pages/posts/[id].js")," in this case). This function gets called at build time and lets you specify which paths you want to pre-render."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'// This function gets called at build time\nexport async function getStaticPaths() {\n    // Call an external API endpoint to get posts\n    const res = await fetch("https://.../posts");\n    const posts = await res.json();\n\n    // Get the paths we want to pre-render based on posts\n    const paths = posts.map((post) => ({\n        params: { id: post.id },\n    }));\n\n    // We\'ll pre-render only these paths at build time.\n    // { fallback: false } means other routes should 404.\n    return { paths, fallback: false };\n}\n')),(0,r.kt)("p",null,"Also in ",(0,r.kt)("inlineCode",{parentName:"p"},"pages/posts/[id].js"),", you need to export ",(0,r.kt)("inlineCode",{parentName:"p"},"getStaticProps")," so that you can fetch the data about the post with this ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," and use it to pre-render the page:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"export default function Post({ post }) {\n    // Render post...\n}\n\nexport async function getStaticPaths() {\n    // ...\n}\n\n// This also gets called at build time\nexport async function getStaticProps({ params }) {\n    // params contains the post `id`.\n    // If the route is like /posts/1, then params.id is 1\n    const res = await fetch(`https://.../posts/${params.id}`);\n    const post = await res.json();\n\n    // Pass post data to the page via props\n    return { props: { post } };\n}\n")),(0,r.kt)("p",null,"To learn more about how ",(0,r.kt)("inlineCode",{parentName:"p"},"getStaticPaths")," works, check out the ",(0,r.kt)("a",{parentName:"p",href:"/docs/pages/building-your-application/data-fetching/get-static-paths"},"Data Fetching documentation"),"."),(0,r.kt)("h3",{id:"when-should-i-use-static-generation"},"When should I use Static Generation?"),(0,r.kt)("p",null,"We recommend using ",(0,r.kt)("strong",{parentName:"p"},"Static Generation")," (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request."),(0,r.kt)("p",null,"You can use Static Generation for many types of pages, including:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Marketing pages"),(0,r.kt)("li",{parentName:"ul"},"Blog posts and portfolios"),(0,r.kt)("li",{parentName:"ul"},"E-commerce product listings"),(0,r.kt)("li",{parentName:"ul"},"Help and documentation")),(0,r.kt)("p",null,'You should ask yourself: "Can I pre-render this page ',(0,r.kt)("strong",{parentName:"p"},"ahead")," of a user's request?\" If the answer is yes, then you should choose Static Generation."),(0,r.kt)("p",null,"On the other hand, Static Generation is ",(0,r.kt)("strong",{parentName:"p"},"not")," a good idea if you cannot pre-render a page ahead of a user's request. Maybe your page shows frequently updated data, and the page content changes on every request."),(0,r.kt)("p",null,"In cases like this, you can do one of the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Use Static Generation with ",(0,r.kt)("strong",{parentName:"li"},"Client-side data fetching:")," You can skip pre-rendering some parts of a page and then use client-side JavaScript to populate them. To learn more about this approach, check out the ",(0,r.kt)("a",{parentName:"li",href:"/docs/pages/building-your-application/data-fetching/client-side"},"Data Fetching documentation"),"."),(0,r.kt)("li",{parentName:"ul"},"Use ",(0,r.kt)("strong",{parentName:"li"},"Server-Side Rendering:")," Next.js pre-renders a page on each request. It will be slower because the page cannot be cached by a CDN, but the pre-rendered page will always be up-to-date. We'll talk about this approach below.")))}m.isMDXComponent=!0}}]);