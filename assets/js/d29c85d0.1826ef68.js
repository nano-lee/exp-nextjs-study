"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[924],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),p=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=p(e.components);return o.createElement(s.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},g=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(t),g=a,m=u["".concat(s,".").concat(g)]||u[g]||c[g]||i;return t?o.createElement(m,r(r({ref:n},d),{},{components:t})):o.createElement(m,r({ref:n},d))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:a,r[1]=l;for(var p=2;p<i;p++)r[p]=t[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}g.displayName="MDXCreateElement"},1203:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var o=t(7462),a=(t(7294),t(3905));const i={sidebar_position:13,title:"Debugging",description:"Learn how to debug your Next.js application with VS Code or Chrome DevTools."},r=void 0,l={unversionedId:"pages/building-your-application/configuring/debugging",id:"pages/building-your-application/configuring/debugging",title:"Debugging",description:"Learn how to debug your Next.js application with VS Code or Chrome DevTools.",source:"@site/docs/03-pages/01-building-your-application/06-configuring/13-debugging.mdx",sourceDirName:"03-pages/01-building-your-application/06-configuring",slug:"/pages/building-your-application/configuring/debugging",permalink:"/docs/pages/building-your-application/configuring/debugging",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/03-pages/01-building-your-application/06-configuring/13-debugging.mdx",tags:[],version:"current",sidebarPosition:13,frontMatter:{sidebar_position:13,title:"Debugging",description:"Learn how to debug your Next.js application with VS Code or Chrome DevTools."},sidebar:"tutorialSidebar",previous:{title:"Error Handling",permalink:"/docs/pages/building-your-application/configuring/error-handling"},next:{title:"Preview Mode",permalink:"/docs/pages/building-your-application/configuring/preview-mode"}},s={},p=[{value:"Debugging with VS Code",id:"debugging-with-vs-code",level:2},{value:"Using the Debugger in Jetbrains WebStorm",id:"using-the-debugger-in-jetbrains-webstorm",level:2},{value:"Debugging with Chrome DevTools",id:"debugging-with-chrome-devtools",level:2},{value:"Client-side code",id:"client-side-code",level:3},{value:"Server-side code",id:"server-side-code",level:3},{value:"Debugging on Windows",id:"debugging-on-windows",level:3},{value:"More information",id:"more-information",level:2}],d={toc:p},u="wrapper";function c(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This documentation explains how you can debug your Next.js frontend and backend code with full source maps support using either the ",(0,a.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/docs/editor/debugging"},"VS Code debugger")," or ",(0,a.kt)("a",{parentName:"p",href:"https://developers.google.com/web/tools/chrome-devtools"},"Chrome DevTools"),"."),(0,a.kt)("p",null,"Any debugger that can attach to Node.js can also be used to debug a Next.js application. You can find more details in the Node.js ",(0,a.kt)("a",{parentName:"p",href:"https://nodejs.org/en/docs/guides/debugging-getting-started/"},"Debugging Guide"),"."),(0,a.kt)("h2",{id:"debugging-with-vs-code"},"Debugging with VS Code"),(0,a.kt)("p",null,"Create a file named ",(0,a.kt)("inlineCode",{parentName:"p"},".vscode/launch.json")," at the root of your project with the following content:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'filename="launch.json"',filename:'"launch.json"'},'{\n    "version": "0.2.0",\n    "configurations": [\n        {\n            "name": "Next.js: debug server-side",\n            "type": "node-terminal",\n            "request": "launch",\n            "command": "npm run dev"\n        },\n        {\n            "name": "Next.js: debug client-side",\n            "type": "chrome",\n            "request": "launch",\n            "url": "http://localhost:3000"\n        },\n        {\n            "name": "Next.js: debug full stack",\n            "type": "node-terminal",\n            "request": "launch",\n            "command": "npm run dev",\n            "serverReadyAction": {\n                "pattern": "- Local:.+(https?://.+)",\n                "uriFormat": "%s",\n                "action": "debugWithChrome"\n            }\n        }\n    ]\n}\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"npm run dev")," can be replaced with ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn dev")," if you're using Yarn. If you're ",(0,a.kt)("a",{parentName:"p",href:"/docs/pages/api-reference/next-cli#development"},"changing the port number")," your application starts on, replace the ",(0,a.kt)("inlineCode",{parentName:"p"},"3000")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"http://localhost:3000")," with the port you're using instead."),(0,a.kt)("p",null,"Now go to the Debug panel (",(0,a.kt)("inlineCode",{parentName:"p"},"Ctrl+Shift+D")," on Windows/Linux, ",(0,a.kt)("inlineCode",{parentName:"p"},"\u21e7+\u2318+D")," on macOS), select a launch configuration, then press ",(0,a.kt)("inlineCode",{parentName:"p"},"F5")," or select ",(0,a.kt)("strong",{parentName:"p"},"Debug: Start Debugging")," from the Command Palette to start your debugging session."),(0,a.kt)("h2",{id:"using-the-debugger-in-jetbrains-webstorm"},"Using the Debugger in Jetbrains WebStorm"),(0,a.kt)("p",null,"Click the drop down menu listing the runtime configuration, and click ",(0,a.kt)("inlineCode",{parentName:"p"},"Edit Configurations..."),". Create a ",(0,a.kt)("inlineCode",{parentName:"p"},"Javascript Debug")," debug configuration with ",(0,a.kt)("inlineCode",{parentName:"p"},"http://localhost:3000")," as the URL. Customize to your liking (e.g. Browser for debugging, store as project file), and click ",(0,a.kt)("inlineCode",{parentName:"p"},"OK"),". Run this debug configuration, and the selected browser should automatically open. At this point, you should have 2 applications in debug mode: the NextJS node application, and the client/ browser application."),(0,a.kt)("h2",{id:"debugging-with-chrome-devtools"},"Debugging with Chrome DevTools"),(0,a.kt)("h3",{id:"client-side-code"},"Client-side code"),(0,a.kt)("p",null,"Start your development server as usual by running ",(0,a.kt)("inlineCode",{parentName:"p"},"next dev"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"npm run dev"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn dev"),". Once the server starts, open ",(0,a.kt)("inlineCode",{parentName:"p"},"http://localhost:3000")," (or your alternate URL) in Chrome. Next, open Chrome's Developer Tools (",(0,a.kt)("inlineCode",{parentName:"p"},"Ctrl+Shift+J")," on Windows/Linux, ",(0,a.kt)("inlineCode",{parentName:"p"},"\u2325+\u2318+I")," on macOS), then go to the ",(0,a.kt)("strong",{parentName:"p"},"Sources")," tab."),(0,a.kt)("p",null,"Now, any time your client-side code reaches a ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/debugger"},(0,a.kt)("inlineCode",{parentName:"a"},"debugger"))," statement, code execution will pause and that file will appear in the debug area. You can also press ",(0,a.kt)("inlineCode",{parentName:"p"},"Ctrl+P")," on Windows/Linux or ",(0,a.kt)("inlineCode",{parentName:"p"},"\u2318+P")," on macOS to search for a file and set breakpoints manually. Note that when searching here, your source files will have paths starting with ",(0,a.kt)("inlineCode",{parentName:"p"},"webpack://_N_E/./"),"."),(0,a.kt)("h3",{id:"server-side-code"},"Server-side code"),(0,a.kt)("p",null,"To debug server-side Next.js code with Chrome DevTools, you need to pass the ",(0,a.kt)("a",{parentName:"p",href:"https://nodejs.org/api/cli.html#cli_inspect_host_port"},(0,a.kt)("inlineCode",{parentName:"a"},"--inspect"))," flag to the underlying Node.js process:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:'filename="Terminal"',filename:'"Terminal"'},"NODE_OPTIONS='--inspect' next dev\n")),(0,a.kt)("p",null,"If you're using ",(0,a.kt)("inlineCode",{parentName:"p"},"npm run dev")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn dev")," then you should update the ",(0,a.kt)("inlineCode",{parentName:"p"},"dev")," script on your ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'filename="package.json"',filename:'"package.json"'},'{\n    "scripts": {\n        "dev": "NODE_OPTIONS=\'--inspect\' next dev"\n    }\n}\n')),(0,a.kt)("p",null,"Launching the Next.js dev server with the ",(0,a.kt)("inlineCode",{parentName:"p"},"--inspect")," flag will look something like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:'filename="Terminal"',filename:'"Terminal"'},"Debugger listening on ws://127.0.0.1:9229/0cf90313-350d-4466-a748-cd60f4e47c95\nFor help, see: https://nodejs.org/en/docs/inspector\nready - started server on 0.0.0.0:3000, url: http://localhost:3000\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Be aware that running ",(0,a.kt)("inlineCode",{parentName:"p"},"NODE_OPTIONS='--inspect' npm run dev")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"NODE_OPTIONS='--inspect' yarn dev")," won't work. This would try to start multiple debuggers on the same port: one for the npm/yarn process and one for Next.js. You would then get an error like ",(0,a.kt)("inlineCode",{parentName:"p"},"Starting inspector on 127.0.0.1:9229 failed: address already in use")," in your console.")),(0,a.kt)("p",null,"Once the server starts, open a new tab in Chrome and visit ",(0,a.kt)("inlineCode",{parentName:"p"},"chrome://inspect"),", where you should see your Next.js application inside the ",(0,a.kt)("strong",{parentName:"p"},"Remote Target")," section. Click ",(0,a.kt)("strong",{parentName:"p"},"inspect")," under your application to open a separate DevTools window, then go to the ",(0,a.kt)("strong",{parentName:"p"},"Sources")," tab."),(0,a.kt)("p",null,"Debugging server-side code here works much like debugging client-side code with Chrome DevTools, except that when you search for files here with ",(0,a.kt)("inlineCode",{parentName:"p"},"Ctrl+P")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"\u2318+P"),", your source files will have paths starting with ",(0,a.kt)("inlineCode",{parentName:"p"},"webpack://{application-name}/./")," (where ",(0,a.kt)("inlineCode",{parentName:"p"},"{application-name}")," will be replaced with the name of your application according to your ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," file)."),(0,a.kt)("h3",{id:"debugging-on-windows"},"Debugging on Windows"),(0,a.kt)("p",null,"Windows users may run into an issue when using ",(0,a.kt)("inlineCode",{parentName:"p"},"NODE_OPTIONS='--inspect'")," as that syntax is not supported on Windows platforms. To get around this, install the ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/cross-env"},(0,a.kt)("inlineCode",{parentName:"a"},"cross-env"))," package as a development dependency (",(0,a.kt)("inlineCode",{parentName:"p"},"-D")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"npm")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn"),") and replace the ",(0,a.kt)("inlineCode",{parentName:"p"},"dev")," script with the following."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'filename="package.json"',filename:'"package.json"'},'{\n    "scripts": {\n        "dev": "cross-env NODE_OPTIONS=\'--inspect\' next dev"\n    }\n}\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"cross-env")," will set the ",(0,a.kt)("inlineCode",{parentName:"p"},"NODE_OPTIONS")," environment variable regardless of which platform you are on (including Mac, Linux, and Windows) and allow you to debug consistently across devices and operating systems."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Good to know"),": Ensure Windows Defender is disabled on your machine. This external service will check ",(0,a.kt)("em",{parentName:"p"},"every file read"),", which has been reported to greatly increase Fast Refresh time with ",(0,a.kt)("inlineCode",{parentName:"p"},"next dev"),". This is a known issue, not related to Next.js, but it does affect Next.js development.")),(0,a.kt)("h2",{id:"more-information"},"More information"),(0,a.kt)("p",null,"To learn more about how to use a JavaScript debugger, take a look at the following documentation:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_breakpoints"},"Node.js debugging in VS Code: Breakpoints")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://developers.google.com/web/tools/chrome-devtools/javascript"},"Chrome DevTools: Debug JavaScript"))))}c.isMDXComponent=!0}}]);