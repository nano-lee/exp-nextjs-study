"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[2391],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var c=n.createContext({}),s=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(a),u=i,m=d["".concat(c,".").concat(u)]||d[u]||h[u]||r;return a?n.createElement(m,o(o({ref:t},p),{},{components:a})):n.createElement(m,o({ref:t},p))}));function m(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},8874:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var n=a(7462),i=(a(7294),a(3905));const r={sidebar_position:1,title:"Data Fetching, Caching, and Revalidating",sidebar_label:"Fetching, Caching, and Revalidating",description:"Learn how to fetch, cache, and revalidate data in your Next.js application."},o=void 0,l={unversionedId:"app/building-your-application/data-fetching/fetching-caching-and-revalidating",id:"app/building-your-application/data-fetching/fetching-caching-and-revalidating",title:"Data Fetching, Caching, and Revalidating",description:"Learn how to fetch, cache, and revalidate data in your Next.js application.",source:"@site/docs/02-app/01-building-your-application/02-data-fetching/01-fetching-caching-and-revalidating.mdx",sourceDirName:"02-app/01-building-your-application/02-data-fetching",slug:"/app/building-your-application/data-fetching/fetching-caching-and-revalidating",permalink:"/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/02-app/01-building-your-application/02-data-fetching/01-fetching-caching-and-revalidating.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Data Fetching, Caching, and Revalidating",sidebar_label:"Fetching, Caching, and Revalidating",description:"Learn how to fetch, cache, and revalidate data in your Next.js application."},sidebar:"tutorialSidebar",previous:{title:"Data Fetching",permalink:"/docs/app/building-your-application/data-fetching/"},next:{title:"Data Fetching Patterns",permalink:"/docs/app/building-your-application/data-fetching/patterns"}},c={},s=[{value:"Fetching Data on the Server with <code>fetch</code>",id:"fetching-data-on-the-server-with-fetch",level:2},{value:"Caching Data",id:"caching-data",level:3},{value:"Revalidating Data",id:"revalidating-data",level:3},{value:"Time-based Revalidation",id:"time-based-revalidation",level:4},{value:"On-demand Revalidation",id:"on-demand-revalidation",level:4},{value:"Error handling and revalidation",id:"error-handling-and-revalidation",level:4},{value:"Opting out of Data Caching",id:"opting-out-of-data-caching",level:3},{value:"Individual <code>fetch</code> Requests",id:"individual-fetch-requests",level:4},{value:"Multiple <code>fetch</code> Requests",id:"multiple-fetch-requests",level:4},{value:"Fetching data on the Server with third-party libraries",id:"fetching-data-on-the-server-with-third-party-libraries",level:2},{value:"Example",id:"example",level:3},{value:"Fetching Data on the Client with Route Handlers",id:"fetching-data-on-the-client-with-route-handlers",level:2},{value:"Fetching Data on the Client with third-party libraries",id:"fetching-data-on-the-client-with-third-party-libraries",level:2}],p={toc:s},d="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(d,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Data fetching is a core part of any application. This page goes through how you can fetch, cache, and revalidate data in React and Next.js."),(0,i.kt)("p",null,"There are four ways you can fetch data:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#fetching-data-on-the-server-with-fetch"},"On the server, with ",(0,i.kt)("inlineCode",{parentName:"a"},"fetch"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#fetching-data-on-the-server-with-third-party-libraries"},"On the server, with third-party libraries")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#fetching-data-on-the-client-with-route-handlers"},"On the client, via a Route Handler")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#fetching-data-on-the-client-with-route-handlers"},"On the client, with third-party libraries"),".")),(0,i.kt)("h2",{id:"fetching-data-on-the-server-with-fetch"},"Fetching Data on the Server with ",(0,i.kt)("inlineCode",{parentName:"h2"},"fetch")),(0,i.kt)("p",null,"Next.js extends the native ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/docs/Web/API/Fetch_API"},(0,i.kt)("inlineCode",{parentName:"a"},"fetch")," Web API")," to allow you to configure the ",(0,i.kt)("a",{parentName:"p",href:"#caching-data"},"caching")," and ",(0,i.kt)("a",{parentName:"p",href:"#revalidating-data"},"revalidating")," behavior for each fetch request on the server. React extends ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," to automatically ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/building-your-application/data-fetching/patterns#fetching-data-where-its-needed"},"memoize")," fetch requests while rendering a React component tree."),(0,i.kt)("p",null,"You can use ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"async"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"await")," in Server Components, in ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/building-your-application/routing/route-handlers"},"Route Handlers"),", and in ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/building-your-application/data-fetching/forms-and-mutations"},"Server Actions"),"."),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'filename="app/page.tsx" switcher',filename:'"app/page.tsx"',switcher:!0},'async function getData() {\n    const res = await fetch("https://api.example.com/...");\n    // The return value is *not* serialized\n    // You can return Date, Map, Set, etc.\n\n    if (!res.ok) {\n        // This will activate the closest `error.js` Error Boundary\n        throw new Error("Failed to fetch data");\n    }\n\n    return res.json();\n}\n\nexport default async function Page() {\n    const data = await getData();\n\n    return <main></main>;\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'filename="app/page.js" switcher',filename:'"app/page.js"',switcher:!0},'async function getData() {\n    const res = await fetch("https://api.example.com/...");\n    // The return value is *not* serialized\n    // You can return Date, Map, Set, etc.\n\n    if (!res.ok) {\n        // This will activate the closest `error.js` Error Boundary\n        throw new Error("Failed to fetch data");\n    }\n\n    return res.json();\n}\n\nexport default async function Page() {\n    const data = await getData();\n\n    return <main></main>;\n}\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Good to know"),":"),(0,i.kt)("ul",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ul"},"Next.js provides helpful functions you may need when fetching data in Server Components such as ",(0,i.kt)("a",{parentName:"li",href:"/docs/app/api-reference/functions/cookies"},(0,i.kt)("inlineCode",{parentName:"a"},"cookies"))," and ",(0,i.kt)("a",{parentName:"li",href:"/docs/app/api-reference/functions/headers"},(0,i.kt)("inlineCode",{parentName:"a"},"headers")),". These will cause the route to be dynamically rendered as they rely on request time information."),(0,i.kt)("li",{parentName:"ul"},"In Route handlers, ",(0,i.kt)("inlineCode",{parentName:"li"},"fetch")," requests are not memoized as Route Handlers are not part of the React component tree."),(0,i.kt)("li",{parentName:"ul"},"To use ",(0,i.kt)("inlineCode",{parentName:"li"},"async"),"/",(0,i.kt)("inlineCode",{parentName:"li"},"await")," in a Server Component with TypeScript, you'll need to use TypeScript ",(0,i.kt)("inlineCode",{parentName:"li"},"5.1.3")," or higher and ",(0,i.kt)("inlineCode",{parentName:"li"},"@types/react")," ",(0,i.kt)("inlineCode",{parentName:"li"},"18.2.8")," or higher."))),(0,i.kt)("h3",{id:"caching-data"},"Caching Data"),(0,i.kt)("p",null,"Caching stores data so it doesn't need to be re-fetched from your data source on every request."),(0,i.kt)("p",null,"By default, Next.js automatically caches the returned values of ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/building-your-application/caching#data-cache"},"Data Cache")," on the server. This means that the data can be fetched at build time or request time, cached, and reused on each data request."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'// \'force-cache\' is the default, and can be omitted\nfetch("https://...", { cache: "force-cache" });\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," requests that use the ",(0,i.kt)("inlineCode",{parentName:"p"},"POST")," method are also automatically cached. Unless it's inside a ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/building-your-application/routing/route-handlers"},"Route Handler")," that uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"POST")," method, then it will not be cached."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"What is the Data Cache?")),(0,i.kt)("p",{parentName:"blockquote"},"The Data Cache is a persistent ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/docs/Web/HTTP/Caching"},"HTTP cache"),". Depending on your platform, the cache can scale automatically and be ",(0,i.kt)("a",{parentName:"p",href:"https://vercel.com/docs/infrastructure/data-cache"},"shared across multiple regions"),"."),(0,i.kt)("p",{parentName:"blockquote"},"Learn more about the ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/building-your-application/caching#data-cache"},"Data Cache"),".")),(0,i.kt)("h3",{id:"revalidating-data"},"Revalidating Data"),(0,i.kt)("p",null,"Revalidation is the process of purging the Data Cache and re-fetching the latest data. This is useful when your data changes and you want to ensure you show the latest information."),(0,i.kt)("p",null,"Cached data can be revalidated in two ways:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Time-based revalidation"),": Automatically revalidate data after a certain amount of time has passed. This is useful for data that changes infrequently and freshness is not as critical."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"On-demand revalidation"),": Manually revalidate data based on an event (e.g. form submission). On-demand revalidation can use a tag-based or path-based approach to revalidate groups of data at once. This is useful when you want to ensure the latest data is shown as soon as possible (e.g. when content from your headless CMS is updated).")),(0,i.kt)("h4",{id:"time-based-revalidation"},"Time-based Revalidation"),(0,i.kt)("p",null,"To revalidate data at a timed interval, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"next.revalidate")," option of ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," to set the cache lifetime of a resource (in seconds)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'fetch("https://...", { next: { revalidate: 3600 } });\n')),(0,i.kt)("p",null,"Alternatively, to revalidate all ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," requests in a route segment, you can use the ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/api-reference/file-conventions/route-segment-config"},"Segment Config Options"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'filename="layout.js | page.js"',filename:'"layout.js',"|":!0,'page.js"':!0},"export const revalidate = 3600; // revalidate at most every hour\n")),(0,i.kt)("p",null,"If you have multiple fetch requests in a statically rendered route, and each has a different revalidation frequency. The lowest time will be used for all requests. For dynamically rendered routes, each ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," request will be revalidated independently."),(0,i.kt)("p",null,"Learn more about ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/building-your-application/caching#time-based-revalidation"},"time-based revalidation"),"."),(0,i.kt)("h4",{id:"on-demand-revalidation"},"On-demand Revalidation"),(0,i.kt)("p",null,"Data can be revalidated on-demand by path (",(0,i.kt)("a",{parentName:"p",href:"/docs/app/api-reference/functions/revalidatePath"},(0,i.kt)("inlineCode",{parentName:"a"},"revalidatePath")),") or by cache tag (",(0,i.kt)("a",{parentName:"p",href:"/docs/app/api-reference/functions/revalidateTag"},(0,i.kt)("inlineCode",{parentName:"a"},"revalidateTag")),") inside a ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/building-your-application/data-fetching/forms-and-mutations"},"Server Action")," or ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/building-your-application/routing/route-handlers"},"Route Handler"),"."),(0,i.kt)("p",null,"Next.js has a cache tagging system for invalidating ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," requests across routes."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"When using ",(0,i.kt)("inlineCode",{parentName:"li"},"fetch"),", you have the option to tag cache entries with one or more tags."),(0,i.kt)("li",{parentName:"ol"},"Then, you can call ",(0,i.kt)("inlineCode",{parentName:"li"},"revalidateTag")," to revalidate all entries associated with that tag.")),(0,i.kt)("p",null,"For example, the following ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," request adds the cache tag ",(0,i.kt)("inlineCode",{parentName:"p"},"collection"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'filename="app/page.tsx" switcher',filename:'"app/page.tsx"',switcher:!0},'export default async function Page() {\n    const res = await fetch("https://...", { next: { tags: ["collection"] } });\n    const data = await res.json();\n    // ...\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'filename="app/page.js" switcher',filename:'"app/page.js"',switcher:!0},'export default async function Page() {\n    const res = await fetch("https://...", { next: { tags: ["collection"] } });\n    const data = await res.json();\n    // ...\n}\n')),(0,i.kt)("p",null,"You can then revalidate this ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," call tagged with ",(0,i.kt)("inlineCode",{parentName:"p"},"collection")," by calling ",(0,i.kt)("inlineCode",{parentName:"p"},"revalidateTag")," in a Server Action:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'filename="app/actions.ts" switcher',filename:'"app/actions.ts"',switcher:!0},'"use server";\n\nimport { revalidateTag } from "next/cache";\n\nexport default async function action() {\n    revalidateTag("collection");\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'filename="app/actions.js" switcher',filename:'"app/actions.js"',switcher:!0},'"use server";\n\nimport { revalidateTag } from "next/cache";\n\nexport default async function action() {\n    revalidateTag("collection");\n}\n')),(0,i.kt)("p",null,"Learn more about ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/building-your-application/caching#on-demand-revalidation"},"on-demand revalidation"),"."),(0,i.kt)("h4",{id:"error-handling-and-revalidation"},"Error handling and revalidation"),(0,i.kt)("p",null,"If an error is thrown while attempting to revalidate data, the last successfully generated data will continue to be served from the cache. On the next subsequent request, Next.js will retry revalidating the data."),(0,i.kt)("h3",{id:"opting-out-of-data-caching"},"Opting out of Data Caching"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," requests are ",(0,i.kt)("strong",{parentName:"p"},"not")," cached if:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"cache: 'no-store'")," is added to ",(0,i.kt)("inlineCode",{parentName:"li"},"fetch")," requests."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"revalidate: 0")," option is added to individual ",(0,i.kt)("inlineCode",{parentName:"li"},"fetch")," requests."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"fetch")," request is inside a Router Handler that uses the ",(0,i.kt)("inlineCode",{parentName:"li"},"POST")," method."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"fetch")," request comes after the usage of ",(0,i.kt)("inlineCode",{parentName:"li"},"headers")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"cookies"),"."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"const dynamic = 'force-dynamic'")," route segment option is used."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"fetchCache")," route segment option is configured to skip cache by default."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"fetch")," request uses ",(0,i.kt)("inlineCode",{parentName:"li"},"Authorization")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"Cookie")," headers and there's an uncached request above it in the component tree.")),(0,i.kt)("h4",{id:"individual-fetch-requests"},"Individual ",(0,i.kt)("inlineCode",{parentName:"h4"},"fetch")," Requests"),(0,i.kt)("p",null,"To opt out of caching for individual ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," requests, you can set the ",(0,i.kt)("inlineCode",{parentName:"p"},"cache")," option in ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"'no-store'"),". This will fetch data dynamically, on every request."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'filename="layout.js | page.js"',filename:'"layout.js',"|":!0,'page.js"':!0},'fetch("https://...", { cache: "no-store" });\n')),(0,i.kt)("p",null,"View all the available ",(0,i.kt)("inlineCode",{parentName:"p"},"cache")," options in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/api-reference/functions/fetch"},(0,i.kt)("inlineCode",{parentName:"a"},"fetch")," API reference"),"."),(0,i.kt)("h4",{id:"multiple-fetch-requests"},"Multiple ",(0,i.kt)("inlineCode",{parentName:"h4"},"fetch")," Requests"),(0,i.kt)("p",null,"If you have multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," requests in a route segment (e.g. a Layout or Page), you can configure the caching behavior of all data requests in the segment using the ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/api-reference/file-conventions/route-segment-config"},"Segment Config Options"),"."),(0,i.kt)("p",null,"However, we recommend configuring the caching behavior of each ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," request individually. This gives you more granular control over the caching behavior."),(0,i.kt)("h2",{id:"fetching-data-on-the-server-with-third-party-libraries"},"Fetching data on the Server with third-party libraries"),(0,i.kt)("p",null,"In cases where you're using a third-party library that doesn't support or expose ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," (for example, a database, CMS, or ORM client), you can configure the caching and revalidating behavior of those requests using the ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/api-reference/file-conventions/route-segment-config"},"Route Segment Config Option")," and React's ",(0,i.kt)("inlineCode",{parentName:"p"},"cache")," function."),(0,i.kt)("p",null,"Whether the data is cached or not will depend on whether the route segment is ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/building-your-application/rendering/server-components#server-rendering-strategies"},"statically or dynamically rendered"),". If the segment is static (default), the output of the request will be cached and revalidated as part of the route segment. If the segment is dynamic, the output of the request will ",(0,i.kt)("em",{parentName:"p"},"not")," be cached and will be re-fetched on every request when the segment is rendered."),(0,i.kt)("p",null,"You can also use the experimental ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/api-reference/functions/unstable_cache"},(0,i.kt)("inlineCode",{parentName:"a"},"unstable_cache")," API"),"."),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("p",null,"In the example below:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"revalidate")," option is set to ",(0,i.kt)("inlineCode",{parentName:"li"},"3600"),", meaning the data will be cached and revalidated at most every hour."),(0,i.kt)("li",{parentName:"ul"},"The React ",(0,i.kt)("inlineCode",{parentName:"li"},"cache")," function is used to ",(0,i.kt)("a",{parentName:"li",href:"/docs/app/building-your-application/caching#request-memoization"},"memoize")," data requests.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'filename="utils/get-item.ts" switcher',filename:'"utils/get-item.ts"',switcher:!0},'import { cache } from "react";\n\nexport const revalidate = 3600; // revalidate the data at most every hour\n\nexport const getItem = cache(async (id: string) => {\n    const item = await db.item.findUnique({ id });\n    return item;\n});\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'filename="utils/get-item.js" switcher',filename:'"utils/get-item.js"',switcher:!0},'import { cache } from "react";\n\nexport const revalidate = 3600; // revalidate the data at most every hour\n\nexport const getItem = cache(async (id) => {\n    const item = await db.item.findUnique({ id });\n    return item;\n});\n')),(0,i.kt)("p",null,"Although the ",(0,i.kt)("inlineCode",{parentName:"p"},"getItem")," function is called twice, only one query will be made to the database."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'filename="app/item/[id]/layout.tsx" switcher',filename:'"app/item/[id]/layout.tsx"',switcher:!0},'import { getItem } from "@/utils/get-item";\n\nexport default async function Layout({\n    params: { id },\n}: {\n    params: { id: string };\n}) {\n    const item = await getItem(id);\n    // ...\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'filename="app/item/[id]/layout.js" switcher',filename:'"app/item/[id]/layout.js"',switcher:!0},'import { getItem } from "@/utils/get-item";\n\nexport default async function Layout({ params: { id } }) {\n    const item = await getItem(id);\n    // ...\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'filename="app/item/[id]/page.tsx" switcher',filename:'"app/item/[id]/page.tsx"',switcher:!0},'import { getItem } from "@/utils/get-item";\n\nexport default async function Page({\n    params: { id },\n}: {\n    params: { id: string };\n}) {\n    const item = await getItem(id);\n    // ...\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'filename="app/item/[id]/page.js" switcher',filename:'"app/item/[id]/page.js"',switcher:!0},'import { getItem } from "@/utils/get-item";\n\nexport default async function Page({ params: { id } }) {\n    const item = await getItem(id);\n    // ...\n}\n')),(0,i.kt)("h2",{id:"fetching-data-on-the-client-with-route-handlers"},"Fetching Data on the Client with Route Handlers"),(0,i.kt)("p",null,"If you need to fetch data in a client component, you can call a ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/building-your-application/routing/route-handlers"},"Route Handler")," from the client. Route Handlers execute on the server and return the data to the client. This is useful when you don't want to expose sensitive information to the client, such as API tokens."),(0,i.kt)("p",null,"See the ",(0,i.kt)("a",{parentName:"p",href:"/docs/app/building-your-application/routing/route-handlers"},"Route Handler")," documentation for examples."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Server Components and Route Handlers")),(0,i.kt)("p",{parentName:"blockquote"},"Since Server Components render on the server, you don't need to call a Route Handler from a Server Component to fetch data. Instead, you can fetch the data directly inside the Server Component.")),(0,i.kt)("h2",{id:"fetching-data-on-the-client-with-third-party-libraries"},"Fetching Data on the Client with third-party libraries"),(0,i.kt)("p",null,"You can also fetch data on the client using a third-party library such as ",(0,i.kt)("a",{parentName:"p",href:"https://swr.vercel.app/"},"SWR")," or ",(0,i.kt)("a",{parentName:"p",href:"https://tanstack.com/query/latest"},"React Query"),". These libraries provide their own APIs for memoizing requests, caching, revalidating, and mutating data."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Future APIs"),":"),(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"use")," is a React function that ",(0,i.kt)("strong",{parentName:"p"},"accepts and handles a promise")," returned by a function. Wrapping ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"use")," is currently ",(0,i.kt)("strong",{parentName:"p"},"not")," recommended in Client Components and may trigger multiple re-renders. Learn more about ",(0,i.kt)("inlineCode",{parentName:"p"},"use")," in the ",(0,i.kt)("a",{parentName:"p",href:"https://react.dev/reference/react/use"},"React docs"),".")))}h.isMDXComponent=!0}}]);