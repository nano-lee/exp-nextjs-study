"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[9578],{3905:(e,r,n)=>{n.d(r,{Zo:()=>d,kt:()=>h});var t=n(7294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=t.createContext({}),p=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},d=function(e){var r=p(e.components);return t.createElement(s.Provider,{value:r},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=o,h=c["".concat(s,".").concat(m)]||c[m]||u[m]||a;return n?t.createElement(h,i(i({ref:r},d),{},{components:n})):t.createElement(h,i({ref:r},d))}));function h(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2704:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var t=n(7462),o=(n(7294),n(3905));const a={sidebar_position:7,title:"Error Handling",description:"Handle runtime errors by automatically wrapping route segments and their nested children in a React Error Boundary.",related:{links:["app/api-reference/file-conventions/error"]}},i=void 0,l={unversionedId:"app/building-your-application/routing/error-handling",id:"app/building-your-application/routing/error-handling",title:"Error Handling",description:"Handle runtime errors by automatically wrapping route segments and their nested children in a React Error Boundary.",source:"@site/docs/02-app/01-building-your-application/01-routing/07-error-handling.mdx",sourceDirName:"02-app/01-building-your-application/01-routing",slug:"/app/building-your-application/routing/error-handling",permalink:"/nano-nextjs-study/docs/app/building-your-application/routing/error-handling",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/02-app/01-building-your-application/01-routing/07-error-handling.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,title:"Error Handling",description:"Handle runtime errors by automatically wrapping route segments and their nested children in a React Error Boundary.",related:{links:["app/api-reference/file-conventions/error"]}},sidebar:"tutorialSidebar",previous:{title:"Loading UI and Streaming",permalink:"/nano-nextjs-study/docs/app/building-your-application/routing/loading-ui-and-streaming"},next:{title:"Parallel Routes",permalink:"/nano-nextjs-study/docs/app/building-your-application/routing/parallel-routes"}},s={},p=[{value:"How <code>error.js</code> Works",id:"how-errorjs-works",level:3},{value:"Recovering From Errors",id:"recovering-from-errors",level:3},{value:"Nested Routes",id:"nested-routes",level:3},{value:"Handling Errors in Layouts",id:"handling-errors-in-layouts",level:3},{value:"Handling Errors in Root Layouts",id:"handling-errors-in-root-layouts",level:3},{value:"Handling Server Errors",id:"handling-server-errors",level:3},{value:"Securing Sensitive Error Information",id:"securing-sensitive-error-information",level:4}],d=(c="Image",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var c;const u={toc:p},m="wrapper";function h(e){let{components:r,...n}=e;return(0,o.kt)(m,(0,t.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"error.js")," file convention allows you to gracefully handle unexpected runtime errors in ",(0,o.kt)("a",{parentName:"p",href:"/docs/app/building-your-application/routing#nested-routes"},"nested routes"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Automatically wrap a route segment and its nested children in a ",(0,o.kt)("a",{parentName:"li",href:"https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary"},"React Error Boundary"),"."),(0,o.kt)("li",{parentName:"ul"},"Create error UI tailored to specific segments using the file-system hierarchy to adjust granularity."),(0,o.kt)("li",{parentName:"ul"},"Isolate errors to affected segments while keeping the rest of the application functional."),(0,o.kt)("li",{parentName:"ul"},"Add functionality to attempt to recover from an error without a full page reload.")),(0,o.kt)("p",null,"Create error UI by adding an ",(0,o.kt)("inlineCode",{parentName:"p"},"error.js")," file inside a route segment and exporting a React component:"),(0,o.kt)(d,{alt:"error.js special file",srcLight:"/docs/light/error-special-file.png",srcDark:"/docs/dark/error-special-file.png",width:"1600",height:"606",mdxType:"Image"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'filename="app/dashboard/error.tsx" switcher',filename:'"app/dashboard/error.tsx"',switcher:!0},'"use client"; // Error components must be Client Components\n\nimport { useEffect } from "react";\n\nexport default function Error({\n    error,\n    reset,\n}: {\n    error: Error & { digest?: string };\n    reset: () => void;\n}) {\n    useEffect(() => {\n        // Log the error to an error reporting service\n        console.error(error);\n    }, [error]);\n\n    return (\n        <div>\n            <h2>Something went wrong!</h2>\n            <button\n                onClick={\n                    // Attempt to recover by trying to re-render the segment\n                    () => reset()\n                }\n            >\n                Try again\n            </button>\n        </div>\n    );\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'filename="app/dashboard/error.js" switcher',filename:'"app/dashboard/error.js"',switcher:!0},'"use client"; // Error components must be Client Components\n\nimport { useEffect } from "react";\n\nexport default function Error({ error, reset }) {\n    useEffect(() => {\n        // Log the error to an error reporting service\n        console.error(error);\n    }, [error]);\n\n    return (\n        <div>\n            <h2>Something went wrong!</h2>\n            <button\n                onClick={\n                    // Attempt to recover by trying to re-render the segment\n                    () => reset()\n                }\n            >\n                Try again\n            </button>\n        </div>\n    );\n}\n')),(0,o.kt)("h3",{id:"how-errorjs-works"},"How ",(0,o.kt)("inlineCode",{parentName:"h3"},"error.js")," Works"),(0,o.kt)(d,{alt:"How error.js works",srcLight:"/docs/light/error-overview.png",srcDark:"/docs/dark/error-overview.png",width:"1600",height:"903",mdxType:"Image"}),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"error.js")," automatically creates a ",(0,o.kt)("a",{parentName:"li",href:"https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary"},"React Error Boundary")," that ",(0,o.kt)("strong",{parentName:"li"},"wraps")," a nested child segment or ",(0,o.kt)("inlineCode",{parentName:"li"},"page.js")," component."),(0,o.kt)("li",{parentName:"ul"},"The React component exported from the ",(0,o.kt)("inlineCode",{parentName:"li"},"error.js")," file is used as the ",(0,o.kt)("strong",{parentName:"li"},"fallback")," component."),(0,o.kt)("li",{parentName:"ul"},"If an error is thrown within the error boundary, the error is ",(0,o.kt)("strong",{parentName:"li"},"contained"),", and the fallback component is ",(0,o.kt)("strong",{parentName:"li"},"rendered"),"."),(0,o.kt)("li",{parentName:"ul"},"When the fallback error component is active, layouts ",(0,o.kt)("strong",{parentName:"li"},"above")," the error boundary ",(0,o.kt)("strong",{parentName:"li"},"maintain")," their state and ",(0,o.kt)("strong",{parentName:"li"},"remain")," interactive, and the error component can display functionality to recover from the error.")),(0,o.kt)("h3",{id:"recovering-from-errors"},"Recovering From Errors"),(0,o.kt)("p",null,"The cause of an error can sometimes be temporary. In these cases, simply trying again might resolve the issue."),(0,o.kt)("p",null,"An error component can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"reset()")," function to prompt the user to attempt to recover from the error. When executed, the function will try to re-render the Error boundary's contents. If successful, the fallback error component is replaced with the result of the re-render."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'filename="app/dashboard/error.tsx" switcher',filename:'"app/dashboard/error.tsx"',switcher:!0},'"use client";\n\nexport default function Error({\n    error,\n    reset,\n}: {\n    error: Error & { digest?: string };\n    reset: () => void;\n}) {\n    return (\n        <div>\n            <h2>Something went wrong!</h2>\n            <button onClick={() => reset()}>Try again</button>\n        </div>\n    );\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'filename="app/dashboard/error.js" switcher',filename:'"app/dashboard/error.js"',switcher:!0},'"use client";\n\nexport default function Error({ error, reset }) {\n    return (\n        <div>\n            <h2>Something went wrong!</h2>\n            <button onClick={() => reset()}>Try again</button>\n        </div>\n    );\n}\n')),(0,o.kt)("h3",{id:"nested-routes"},"Nested Routes"),(0,o.kt)("p",null,"React components created through ",(0,o.kt)("a",{parentName:"p",href:"/docs/app/building-your-application/routing#file-conventions"},"special files")," are rendered in a ",(0,o.kt)("a",{parentName:"p",href:"/docs/app/building-your-application/routing#component-hierarchy"},"specific nested hierarchy"),"."),(0,o.kt)("p",null,"For example, a nested route with two segments that both include ",(0,o.kt)("inlineCode",{parentName:"p"},"layout.js")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"error.js")," files are rendered in the following ",(0,o.kt)("em",{parentName:"p"},"simplified")," component hierarchy:"),(0,o.kt)(d,{alt:"Nested Error Component Hierarchy",srcLight:"/docs/light/nested-error-component-hierarchy.png",srcDark:"/docs/dark/nested-error-component-hierarchy.png",width:"1600",height:"687",mdxType:"Image"}),(0,o.kt)("p",null,"The nested component hierarchy has implications for the behavior of ",(0,o.kt)("inlineCode",{parentName:"p"},"error.js")," files across a nested route:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Errors bubble up to the nearest parent error boundary. This means an ",(0,o.kt)("inlineCode",{parentName:"li"},"error.js")," file will handle errors for all its nested child segments. More or less granular error UI can be achieved by placing ",(0,o.kt)("inlineCode",{parentName:"li"},"error.js")," files at different levels in the nested folders of a route."),(0,o.kt)("li",{parentName:"ul"},"An ",(0,o.kt)("inlineCode",{parentName:"li"},"error.js")," boundary will ",(0,o.kt)("strong",{parentName:"li"},"not")," handle errors thrown in a ",(0,o.kt)("inlineCode",{parentName:"li"},"layout.js")," component in the ",(0,o.kt)("strong",{parentName:"li"},"same")," segment because the error boundary is nested ",(0,o.kt)("strong",{parentName:"li"},"inside")," that layout's component.")),(0,o.kt)("h3",{id:"handling-errors-in-layouts"},"Handling Errors in Layouts"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"error.js")," boundaries do ",(0,o.kt)("strong",{parentName:"p"},"not")," catch errors thrown in ",(0,o.kt)("inlineCode",{parentName:"p"},"layout.js")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"template.js")," components of the ",(0,o.kt)("strong",{parentName:"p"},"same segment"),". This ",(0,o.kt)("a",{parentName:"p",href:"#nested-routes"},"intentional hierarchy")," keeps important UI that is shared between sibling routes (such as navigation) visible and functional when an error occurs."),(0,o.kt)("p",null,"To handle errors within a specific layout or template, place an ",(0,o.kt)("inlineCode",{parentName:"p"},"error.js")," file in the layouts parent segment."),(0,o.kt)("p",null,"To handle errors within the root layout or template, use a variation of ",(0,o.kt)("inlineCode",{parentName:"p"},"error.js")," called ",(0,o.kt)("inlineCode",{parentName:"p"},"global-error.js"),"."),(0,o.kt)("h3",{id:"handling-errors-in-root-layouts"},"Handling Errors in Root Layouts"),(0,o.kt)("p",null,"The root ",(0,o.kt)("inlineCode",{parentName:"p"},"app/error.js")," boundary does ",(0,o.kt)("strong",{parentName:"p"},"not")," catch errors thrown in the root ",(0,o.kt)("inlineCode",{parentName:"p"},"app/layout.js")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"app/template.js")," component."),(0,o.kt)("p",null,"To specifically handle errors in these root components, use a variation of ",(0,o.kt)("inlineCode",{parentName:"p"},"error.js")," called ",(0,o.kt)("inlineCode",{parentName:"p"},"app/global-error.js")," located in the root ",(0,o.kt)("inlineCode",{parentName:"p"},"app")," directory."),(0,o.kt)("p",null,"Unlike the root ",(0,o.kt)("inlineCode",{parentName:"p"},"error.js"),", the ",(0,o.kt)("inlineCode",{parentName:"p"},"global-error.js")," error boundary wraps the ",(0,o.kt)("strong",{parentName:"p"},"entire")," application, and its fallback component replaces the root layout when active. Because of this, it is important to note that ",(0,o.kt)("inlineCode",{parentName:"p"},"global-error.js")," ",(0,o.kt)("strong",{parentName:"p"},"must")," define its own ",(0,o.kt)("inlineCode",{parentName:"p"},"<html>")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"<body>")," tags."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"global-error.js"),' is the least granular error UI and can be considered "catch-all" error handling for the whole application. It is unlikely to be triggered often as root components are typically less dynamic, and other ',(0,o.kt)("inlineCode",{parentName:"p"},"error.js")," boundaries will catch most errors."),(0,o.kt)("p",null,"Even if a ",(0,o.kt)("inlineCode",{parentName:"p"},"global-error.js")," is defined, it is still recommended to define a root ",(0,o.kt)("inlineCode",{parentName:"p"},"error.js")," whose fallback component will be rendered ",(0,o.kt)("strong",{parentName:"p"},"within")," the root layout, which includes globally shared UI and branding."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'filename="app/global-error.tsx" switcher',filename:'"app/global-error.tsx"',switcher:!0},'"use client";\n\nexport default function GlobalError({\n    error,\n    reset,\n}: {\n    error: Error & { digest?: string };\n    reset: () => void;\n}) {\n    return (\n        <html>\n            <body>\n                <h2>Something went wrong!</h2>\n                <button onClick={() => reset()}>Try again</button>\n            </body>\n        </html>\n    );\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'filename="app/global-error.js" switcher',filename:'"app/global-error.js"',switcher:!0},'"use client";\n\nexport default function GlobalError({ error, reset }) {\n    return (\n        <html>\n            <body>\n                <h2>Something went wrong!</h2>\n                <button onClick={() => reset()}>Try again</button>\n            </body>\n        </html>\n    );\n}\n')),(0,o.kt)("h3",{id:"handling-server-errors"},"Handling Server Errors"),(0,o.kt)("p",null,"If an error is thrown inside a Server Component, Next.js will forward an ",(0,o.kt)("inlineCode",{parentName:"p"},"Error")," object (stripped of sensitive error information in production) to the nearest ",(0,o.kt)("inlineCode",{parentName:"p"},"error.js")," file as the ",(0,o.kt)("inlineCode",{parentName:"p"},"error")," prop."),(0,o.kt)("h4",{id:"securing-sensitive-error-information"},"Securing Sensitive Error Information"),(0,o.kt)("p",null,"During production, the ",(0,o.kt)("inlineCode",{parentName:"p"},"Error")," object forwarded to the client only includes a generic ",(0,o.kt)("inlineCode",{parentName:"p"},"message")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"digest")," property."),(0,o.kt)("p",null,"This is a security precaution to avoid leaking potentially sensitive details included in the error to the client."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"message")," property contains a generic message about the error and the ",(0,o.kt)("inlineCode",{parentName:"p"},"digest")," property contains an automatically generated hash of the error that can be used to match the corresponding error in server-side logs."),(0,o.kt)("p",null,"During development, the ",(0,o.kt)("inlineCode",{parentName:"p"},"Error")," object forwarded to the client will be serialized and include the ",(0,o.kt)("inlineCode",{parentName:"p"},"message")," of the original error for easier debugging."))}h.isMDXComponent=!0}}]);